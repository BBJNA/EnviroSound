
EnviroSound.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002a68  08002a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aa0  08002aa0  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08002aa0  08002aa0  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aa0  08002aa0  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aa0  08002aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aa4  08002aa4  00012aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08002aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200000d8  08002b80  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08002b80  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b67d  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c4b  00000000  00000000  0002b77d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  0002d3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c98  00000000  00000000  0002e128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195fd  00000000  00000000  0002edc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b048  00000000  00000000  000483bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095d3e  00000000  00000000  00053405  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9143  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff4  00000000  00000000  000e91c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d8 	.word	0x200000d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a50 	.word	0x08002a50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000dc 	.word	0x200000dc
 8000104:	08002a50 	.word	0x08002a50

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 faf5 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f823 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f92b 	bl	8000488 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f90b 	bl	800044c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f8d9 	bl	80003ec <MX_USART2_UART_Init>
  MX_DAC_Init();
 800023a:	f000 f86f 	bl	800031c <MX_DAC_Init>
  MX_TIM6_Init();
 800023e:	f000 f89b 	bl	8000378 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <main+0x44>)
 8000244:	0018      	movs	r0, r3
 8000246:	f001 ff5b 	bl	8002100 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sawtable, (uint32_t) tablesize, DAC_ALIGN_12B_R);
 800024a:	4b07      	ldr	r3, [pc, #28]	; (8000268 <main+0x48>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	0019      	movs	r1, r3
 8000250:	4a06      	ldr	r2, [pc, #24]	; (800026c <main+0x4c>)
 8000252:	4807      	ldr	r0, [pc, #28]	; (8000270 <main+0x50>)
 8000254:	2300      	movs	r3, #0
 8000256:	9300      	str	r3, [sp, #0]
 8000258:	000b      	movs	r3, r1
 800025a:	2100      	movs	r1, #0
 800025c:	f000 fc98 	bl	8000b90 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000260:	e7fe      	b.n	8000260 <main+0x40>
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	2000014c 	.word	0x2000014c
 8000268:	200000c8 	.word	0x200000c8
 800026c:	20000000 	.word	0x20000000
 8000270:	20000138 	.word	0x20000138

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b590      	push	{r4, r7, lr}
 8000276:	b099      	sub	sp, #100	; 0x64
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	242c      	movs	r4, #44	; 0x2c
 800027c:	193b      	adds	r3, r7, r4
 800027e:	0018      	movs	r0, r3
 8000280:	2334      	movs	r3, #52	; 0x34
 8000282:	001a      	movs	r2, r3
 8000284:	2100      	movs	r1, #0
 8000286:	f002 fbdb 	bl	8002a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028a:	231c      	movs	r3, #28
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	0018      	movs	r0, r3
 8000290:	2310      	movs	r3, #16
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f002 fbd3 	bl	8002a40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029a:	003b      	movs	r3, r7
 800029c:	0018      	movs	r0, r3
 800029e:	231c      	movs	r3, #28
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f002 fbcc 	bl	8002a40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	2220      	movs	r2, #32
 80002ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002ae:	193b      	adds	r3, r7, r4
 80002b0:	2201      	movs	r2, #1
 80002b2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	2200      	movs	r2, #0
 80002b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	193b      	adds	r3, r7, r4
 80002bc:	0018      	movs	r0, r3
 80002be:	f001 f8d1 	bl	8001464 <HAL_RCC_OscConfig>
 80002c2:	1e03      	subs	r3, r0, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002c6:	f000 f949 	bl	800055c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	211c      	movs	r1, #28
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2207      	movs	r2, #7
 80002d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2203      	movs	r2, #3
 80002d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2101      	movs	r1, #1
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 fc41 	bl	8001b70 <HAL_RCC_ClockConfig>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002f2:	f000 f933 	bl	800055c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2202      	movs	r2, #2
 80002fa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002fc:	003b      	movs	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000302:	003b      	movs	r3, r7
 8000304:	0018      	movs	r0, r3
 8000306:	f001 fdab 	bl	8001e60 <HAL_RCCEx_PeriphCLKConfig>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800030e:	f000 f925 	bl	800055c <Error_Handler>
  }
}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b019      	add	sp, #100	; 0x64
 8000318:	bd90      	pop	{r4, r7, pc}
	...

0800031c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000322:	003b      	movs	r3, r7
 8000324:	0018      	movs	r0, r3
 8000326:	2308      	movs	r3, #8
 8000328:	001a      	movs	r2, r3
 800032a:	2100      	movs	r1, #0
 800032c:	f002 fb88 	bl	8002a40 <memset>
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_DAC_Init+0x54>)
 8000332:	4a10      	ldr	r2, [pc, #64]	; (8000374 <MX_DAC_Init+0x58>)
 8000334:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_DAC_Init+0x54>)
 8000338:	0018      	movs	r0, r3
 800033a:	f000 fbad 	bl	8000a98 <HAL_DAC_Init>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8000342:	f000 f90b 	bl	800055c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000346:	003b      	movs	r3, r7
 8000348:	2204      	movs	r2, #4
 800034a:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800034c:	003b      	movs	r3, r7
 800034e:	2200      	movs	r2, #0
 8000350:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000352:	0039      	movs	r1, r7
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_DAC_Init+0x54>)
 8000356:	2200      	movs	r2, #0
 8000358:	0018      	movs	r0, r3
 800035a:	f000 fbd9 	bl	8000b10 <HAL_DAC_ConfigChannel>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8000362:	f000 f8fb 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b002      	add	sp, #8
 800036c:	bd80      	pop	{r7, pc}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	20000138 	.word	0x20000138
 8000374:	40007400 	.word	0x40007400

08000378 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800037e:	003b      	movs	r3, r7
 8000380:	0018      	movs	r0, r3
 8000382:	2308      	movs	r3, #8
 8000384:	001a      	movs	r2, r3
 8000386:	2100      	movs	r1, #0
 8000388:	f002 fb5a 	bl	8002a40 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_TIM6_Init+0x6c>)
 800038e:	4a16      	ldr	r2, [pc, #88]	; (80003e8 <MX_TIM6_Init+0x70>)
 8000390:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_TIM6_Init+0x6c>)
 8000394:	2201      	movs	r2, #1
 8000396:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <MX_TIM6_Init+0x6c>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 452;
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <MX_TIM6_Init+0x6c>)
 80003a0:	22e2      	movs	r2, #226	; 0xe2
 80003a2:	0052      	lsls	r2, r2, #1
 80003a4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003a6:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_TIM6_Init+0x6c>)
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80003ac:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <MX_TIM6_Init+0x6c>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 fe56 	bl	8002060 <HAL_TIM_Base_Init>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 80003b8:	f000 f8d0 	bl	800055c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003bc:	003b      	movs	r3, r7
 80003be:	2220      	movs	r2, #32
 80003c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c2:	003b      	movs	r3, r7
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80003c8:	003a      	movs	r2, r7
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_TIM6_Init+0x6c>)
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 ff60 	bl	8002294 <HAL_TIMEx_MasterConfigSynchronization>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 80003d8:	f000 f8c0 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b002      	add	sp, #8
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	2000014c 	.word	0x2000014c
 80003e8:	40001000 	.word	0x40001000

080003ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003f0:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_USART2_UART_Init+0x58>)
 80003f2:	4a15      	ldr	r2, [pc, #84]	; (8000448 <MX_USART2_UART_Init+0x5c>)
 80003f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003f6:	4b13      	ldr	r3, [pc, #76]	; (8000444 <MX_USART2_UART_Init+0x58>)
 80003f8:	2296      	movs	r2, #150	; 0x96
 80003fa:	0212      	lsls	r2, r2, #8
 80003fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_USART2_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_USART2_UART_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_USART2_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <MX_USART2_UART_Init+0x58>)
 8000412:	220c      	movs	r2, #12
 8000414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_USART2_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <MX_USART2_UART_Init+0x58>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <MX_USART2_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_USART2_UART_Init+0x58>)
 800042a:	2200      	movs	r2, #0
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800042e:	4b05      	ldr	r3, [pc, #20]	; (8000444 <MX_USART2_UART_Init+0x58>)
 8000430:	0018      	movs	r0, r3
 8000432:	f001 ff8d 	bl	8002350 <HAL_UART_Init>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800043a:	f000 f88f 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000194 	.word	0x20000194
 8000448:	40004400 	.word	0x40004400

0800044c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_DMA_Init+0x38>)
 8000454:	695a      	ldr	r2, [r3, #20]
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_DMA_Init+0x38>)
 8000458:	2101      	movs	r1, #1
 800045a:	430a      	orrs	r2, r1
 800045c:	615a      	str	r2, [r3, #20]
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_DMA_Init+0x38>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	2201      	movs	r2, #1
 8000464:	4013      	ands	r3, r2
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	200a      	movs	r0, #10
 8000470:	f000 fae0 	bl	8000a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000474:	200a      	movs	r0, #10
 8000476:	f000 faf2 	bl	8000a5e <HAL_NVIC_EnableIRQ>

}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	40021000 	.word	0x40021000

08000488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b089      	sub	sp, #36	; 0x24
 800048c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	240c      	movs	r4, #12
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	2314      	movs	r3, #20
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f002 fad1 	bl	8002a40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049e:	4b2c      	ldr	r3, [pc, #176]	; (8000550 <MX_GPIO_Init+0xc8>)
 80004a0:	695a      	ldr	r2, [r3, #20]
 80004a2:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <MX_GPIO_Init+0xc8>)
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	0309      	lsls	r1, r1, #12
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	4b28      	ldr	r3, [pc, #160]	; (8000550 <MX_GPIO_Init+0xc8>)
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	031b      	lsls	r3, r3, #12
 80004b4:	4013      	ands	r3, r2
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ba:	4b25      	ldr	r3, [pc, #148]	; (8000550 <MX_GPIO_Init+0xc8>)
 80004bc:	695a      	ldr	r2, [r3, #20]
 80004be:	4b24      	ldr	r3, [pc, #144]	; (8000550 <MX_GPIO_Init+0xc8>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	03c9      	lsls	r1, r1, #15
 80004c4:	430a      	orrs	r2, r1
 80004c6:	615a      	str	r2, [r3, #20]
 80004c8:	4b21      	ldr	r3, [pc, #132]	; (8000550 <MX_GPIO_Init+0xc8>)
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	03db      	lsls	r3, r3, #15
 80004d0:	4013      	ands	r3, r2
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <MX_GPIO_Init+0xc8>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <MX_GPIO_Init+0xc8>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	0289      	lsls	r1, r1, #10
 80004e0:	430a      	orrs	r2, r1
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <MX_GPIO_Init+0xc8>)
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	029b      	lsls	r3, r3, #10
 80004ec:	4013      	ands	r3, r2
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004f2:	2390      	movs	r3, #144	; 0x90
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	2200      	movs	r2, #0
 80004f8:	2120      	movs	r1, #32
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 ff94 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	0192      	lsls	r2, r2, #6
 8000506:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	4a12      	ldr	r2, [pc, #72]	; (8000554 <MX_GPIO_Init+0xcc>)
 800050c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000514:	193b      	adds	r3, r7, r4
 8000516:	4a10      	ldr	r2, [pc, #64]	; (8000558 <MX_GPIO_Init+0xd0>)
 8000518:	0019      	movs	r1, r3
 800051a:	0010      	movs	r0, r2
 800051c:	f000 fe0c 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000520:	0021      	movs	r1, r4
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2220      	movs	r2, #32
 8000526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2201      	movs	r2, #1
 800052c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800053a:	187a      	adds	r2, r7, r1
 800053c:	2390      	movs	r3, #144	; 0x90
 800053e:	05db      	lsls	r3, r3, #23
 8000540:	0011      	movs	r1, r2
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fdf8 	bl	8001138 <HAL_GPIO_Init>

}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b009      	add	sp, #36	; 0x24
 800054e:	bd90      	pop	{r4, r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	10210000 	.word	0x10210000
 8000558:	48000800 	.word	0x48000800

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <HAL_MspInit+0x44>)
 8000570:	699a      	ldr	r2, [r3, #24]
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_MspInit+0x44>)
 8000574:	2101      	movs	r1, #1
 8000576:	430a      	orrs	r2, r1
 8000578:	619a      	str	r2, [r3, #24]
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_MspInit+0x44>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	2201      	movs	r2, #1
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_MspInit+0x44>)
 8000588:	69da      	ldr	r2, [r3, #28]
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <HAL_MspInit+0x44>)
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	0549      	lsls	r1, r1, #21
 8000590:	430a      	orrs	r2, r1
 8000592:	61da      	str	r2, [r3, #28]
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <HAL_MspInit+0x44>)
 8000596:	69da      	ldr	r2, [r3, #28]
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	055b      	lsls	r3, r3, #21
 800059c:	4013      	ands	r3, r2
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b002      	add	sp, #8
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	40021000 	.word	0x40021000

080005b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	2314      	movs	r3, #20
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	0018      	movs	r0, r3
 80005be:	2314      	movs	r3, #20
 80005c0:	001a      	movs	r2, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	f002 fa3c 	bl	8002a40 <memset>
  if(hdac->Instance==DAC)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a2d      	ldr	r2, [pc, #180]	; (8000684 <HAL_DAC_MspInit+0xd4>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d154      	bne.n	800067c <HAL_DAC_MspInit+0xcc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005d2:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <HAL_DAC_MspInit+0xd8>)
 80005d4:	69da      	ldr	r2, [r3, #28]
 80005d6:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <HAL_DAC_MspInit+0xd8>)
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	0589      	lsls	r1, r1, #22
 80005dc:	430a      	orrs	r2, r1
 80005de:	61da      	str	r2, [r3, #28]
 80005e0:	4b29      	ldr	r3, [pc, #164]	; (8000688 <HAL_DAC_MspInit+0xd8>)
 80005e2:	69da      	ldr	r2, [r3, #28]
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	059b      	lsls	r3, r3, #22
 80005e8:	4013      	ands	r3, r2
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b26      	ldr	r3, [pc, #152]	; (8000688 <HAL_DAC_MspInit+0xd8>)
 80005f0:	695a      	ldr	r2, [r3, #20]
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <HAL_DAC_MspInit+0xd8>)
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	0289      	lsls	r1, r1, #10
 80005f8:	430a      	orrs	r2, r1
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <HAL_DAC_MspInit+0xd8>)
 80005fe:	695a      	ldr	r2, [r3, #20]
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	029b      	lsls	r3, r3, #10
 8000604:	4013      	ands	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800060a:	2114      	movs	r1, #20
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2210      	movs	r2, #16
 8000610:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2203      	movs	r2, #3
 8000616:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	187a      	adds	r2, r7, r1
 8000620:	2390      	movs	r3, #144	; 0x90
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	0011      	movs	r1, r2
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fd86 	bl	8001138 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_DAC_MspInit+0xdc>)
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <HAL_DAC_MspInit+0xe0>)
 8000630:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <HAL_DAC_MspInit+0xdc>)
 8000634:	2210      	movs	r2, #16
 8000636:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <HAL_DAC_MspInit+0xdc>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <HAL_DAC_MspInit+0xdc>)
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <HAL_DAC_MspInit+0xdc>)
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	0052      	lsls	r2, r2, #1
 800064a:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <HAL_DAC_MspInit+0xdc>)
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	00d2      	lsls	r2, r2, #3
 8000652:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <HAL_DAC_MspInit+0xdc>)
 8000656:	2220      	movs	r2, #32
 8000658:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <HAL_DAC_MspInit+0xdc>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <HAL_DAC_MspInit+0xdc>)
 8000662:	0018      	movs	r0, r3
 8000664:	f000 fbd0 	bl	8000e08 <HAL_DMA_Init>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 800066c:	f7ff ff76 	bl	800055c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a06      	ldr	r2, [pc, #24]	; (800068c <HAL_DAC_MspInit+0xdc>)
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <HAL_DAC_MspInit+0xdc>)
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b00a      	add	sp, #40	; 0x28
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40007400 	.word	0x40007400
 8000688:	40021000 	.word	0x40021000
 800068c:	200000f4 	.word	0x200000f4
 8000690:	40020030 	.word	0x40020030

08000694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <HAL_TIM_Base_MspInit+0x34>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d10b      	bne.n	80006be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <HAL_TIM_Base_MspInit+0x38>)
 80006a8:	69da      	ldr	r2, [r3, #28]
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <HAL_TIM_Base_MspInit+0x38>)
 80006ac:	2110      	movs	r1, #16
 80006ae:	430a      	orrs	r2, r1
 80006b0:	61da      	str	r2, [r3, #28]
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_TIM_Base_MspInit+0x38>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	2210      	movs	r2, #16
 80006b8:	4013      	ands	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b004      	add	sp, #16
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	40001000 	.word	0x40001000
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	2314      	movs	r3, #20
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	0018      	movs	r0, r3
 80006de:	2314      	movs	r3, #20
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f002 f9ac 	bl	8002a40 <memset>
  if(huart->Instance==USART2)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <HAL_UART_MspInit+0x90>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d132      	bne.n	8000758 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <HAL_UART_MspInit+0x94>)
 80006f4:	69da      	ldr	r2, [r3, #28]
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <HAL_UART_MspInit+0x94>)
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	0289      	lsls	r1, r1, #10
 80006fc:	430a      	orrs	r2, r1
 80006fe:	61da      	str	r2, [r3, #28]
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <HAL_UART_MspInit+0x94>)
 8000702:	69da      	ldr	r2, [r3, #28]
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	029b      	lsls	r3, r3, #10
 8000708:	4013      	ands	r3, r2
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_UART_MspInit+0x94>)
 8000710:	695a      	ldr	r2, [r3, #20]
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_UART_MspInit+0x94>)
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	0289      	lsls	r1, r1, #10
 8000718:	430a      	orrs	r2, r1
 800071a:	615a      	str	r2, [r3, #20]
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <HAL_UART_MspInit+0x94>)
 800071e:	695a      	ldr	r2, [r3, #20]
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	029b      	lsls	r3, r3, #10
 8000724:	4013      	ands	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800072a:	2114      	movs	r1, #20
 800072c:	187b      	adds	r3, r7, r1
 800072e:	220c      	movs	r2, #12
 8000730:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2202      	movs	r2, #2
 8000736:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2201      	movs	r2, #1
 8000748:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	187a      	adds	r2, r7, r1
 800074c:	2390      	movs	r3, #144	; 0x90
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	0011      	movs	r1, r2
 8000752:	0018      	movs	r0, r3
 8000754:	f000 fcf0 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b00a      	add	sp, #40	; 0x28
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40004400 	.word	0x40004400
 8000764:	40021000 	.word	0x40021000

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f888 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fbde 	bl	8000f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	200000f4 	.word	0x200000f4

080007b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <Reset_Handler>:
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <LoopForever+0x2>)
 80007c2:	4685      	mov	sp, r0
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <LoopForever+0x6>)
 80007c6:	490e      	ldr	r1, [pc, #56]	; (8000800 <LoopForever+0xa>)
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <LoopForever+0xe>)
 80007ca:	2300      	movs	r3, #0
 80007cc:	e002      	b.n	80007d4 <LoopCopyDataInit>

080007ce <CopyDataInit>:
 80007ce:	58d4      	ldr	r4, [r2, r3]
 80007d0:	50c4      	str	r4, [r0, r3]
 80007d2:	3304      	adds	r3, #4

080007d4 <LoopCopyDataInit>:
 80007d4:	18c4      	adds	r4, r0, r3
 80007d6:	428c      	cmp	r4, r1
 80007d8:	d3f9      	bcc.n	80007ce <CopyDataInit>
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <LoopForever+0x12>)
 80007dc:	4c0b      	ldr	r4, [pc, #44]	; (800080c <LoopForever+0x16>)
 80007de:	2300      	movs	r3, #0
 80007e0:	e001      	b.n	80007e6 <LoopFillZerobss>

080007e2 <FillZerobss>:
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	3204      	adds	r2, #4

080007e6 <LoopFillZerobss>:
 80007e6:	42a2      	cmp	r2, r4
 80007e8:	d3fb      	bcc.n	80007e2 <FillZerobss>
 80007ea:	f7ff ffe3 	bl	80007b4 <SystemInit>
 80007ee:	f002 f903 	bl	80029f8 <__libc_init_array>
 80007f2:	f7ff fd15 	bl	8000220 <main>

080007f6 <LoopForever>:
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
 80007f8:	20004000 	.word	0x20004000
 80007fc:	20000000 	.word	0x20000000
 8000800:	200000d8 	.word	0x200000d8
 8000804:	08002aa8 	.word	0x08002aa8
 8000808:	200000d8 	.word	0x200000d8
 800080c:	2000021c 	.word	0x2000021c

08000810 <ADC1_COMP_IRQHandler>:
 8000810:	e7fe      	b.n	8000810 <ADC1_COMP_IRQHandler>
	...

08000814 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <HAL_Init+0x24>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_Init+0x24>)
 800081e:	2110      	movs	r1, #16
 8000820:	430a      	orrs	r2, r1
 8000822:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000824:	2000      	movs	r0, #0
 8000826:	f000 f809 	bl	800083c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800082a:	f7ff fe9d 	bl	8000568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40022000 	.word	0x40022000

0800083c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_InitTick+0x5c>)
 8000846:	681c      	ldr	r4, [r3, #0]
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_InitTick+0x60>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	0019      	movs	r1, r3
 800084e:	23fa      	movs	r3, #250	; 0xfa
 8000850:	0098      	lsls	r0, r3, #2
 8000852:	f7ff fc59 	bl	8000108 <__udivsi3>
 8000856:	0003      	movs	r3, r0
 8000858:	0019      	movs	r1, r3
 800085a:	0020      	movs	r0, r4
 800085c:	f7ff fc54 	bl	8000108 <__udivsi3>
 8000860:	0003      	movs	r3, r0
 8000862:	0018      	movs	r0, r3
 8000864:	f000 f90b 	bl	8000a7e <HAL_SYSTICK_Config>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800086c:	2301      	movs	r3, #1
 800086e:	e00f      	b.n	8000890 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b03      	cmp	r3, #3
 8000874:	d80b      	bhi.n	800088e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	2301      	movs	r3, #1
 800087a:	425b      	negs	r3, r3
 800087c:	2200      	movs	r2, #0
 800087e:	0018      	movs	r0, r3
 8000880:	f000 f8d8 	bl	8000a34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_InitTick+0x64>)
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	0018      	movs	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	b003      	add	sp, #12
 8000896:	bd90      	pop	{r4, r7, pc}
 8000898:	200000cc 	.word	0x200000cc
 800089c:	200000d4 	.word	0x200000d4
 80008a0:	200000d0 	.word	0x200000d0

080008a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x1c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	001a      	movs	r2, r3
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_IncTick+0x20>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	18d2      	adds	r2, r2, r3
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <HAL_IncTick+0x20>)
 80008b6:	601a      	str	r2, [r3, #0]
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	200000d4 	.word	0x200000d4
 80008c4:	20000218 	.word	0x20000218

080008c8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  return uwTick;
 80008cc:	4b02      	ldr	r3, [pc, #8]	; (80008d8 <HAL_GetTick+0x10>)
 80008ce:	681b      	ldr	r3, [r3, #0]
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	20000218 	.word	0x20000218

080008dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	0002      	movs	r2, r0
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b7f      	cmp	r3, #127	; 0x7f
 80008ee:	d809      	bhi.n	8000904 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	001a      	movs	r2, r3
 80008f6:	231f      	movs	r3, #31
 80008f8:	401a      	ands	r2, r3
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <__NVIC_EnableIRQ+0x30>)
 80008fc:	2101      	movs	r1, #1
 80008fe:	4091      	lsls	r1, r2
 8000900:	000a      	movs	r2, r1
 8000902:	601a      	str	r2, [r3, #0]
  }
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}
 800090c:	e000e100 	.word	0xe000e100

08000910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	0002      	movs	r2, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b7f      	cmp	r3, #127	; 0x7f
 8000924:	d828      	bhi.n	8000978 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000926:	4a2f      	ldr	r2, [pc, #188]	; (80009e4 <__NVIC_SetPriority+0xd4>)
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b25b      	sxtb	r3, r3
 800092e:	089b      	lsrs	r3, r3, #2
 8000930:	33c0      	adds	r3, #192	; 0xc0
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	589b      	ldr	r3, [r3, r2]
 8000936:	1dfa      	adds	r2, r7, #7
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	0011      	movs	r1, r2
 800093c:	2203      	movs	r2, #3
 800093e:	400a      	ands	r2, r1
 8000940:	00d2      	lsls	r2, r2, #3
 8000942:	21ff      	movs	r1, #255	; 0xff
 8000944:	4091      	lsls	r1, r2
 8000946:	000a      	movs	r2, r1
 8000948:	43d2      	mvns	r2, r2
 800094a:	401a      	ands	r2, r3
 800094c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	019b      	lsls	r3, r3, #6
 8000952:	22ff      	movs	r2, #255	; 0xff
 8000954:	401a      	ands	r2, r3
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	0018      	movs	r0, r3
 800095c:	2303      	movs	r3, #3
 800095e:	4003      	ands	r3, r0
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000964:	481f      	ldr	r0, [pc, #124]	; (80009e4 <__NVIC_SetPriority+0xd4>)
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b25b      	sxtb	r3, r3
 800096c:	089b      	lsrs	r3, r3, #2
 800096e:	430a      	orrs	r2, r1
 8000970:	33c0      	adds	r3, #192	; 0xc0
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000976:	e031      	b.n	80009dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <__NVIC_SetPriority+0xd8>)
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	0019      	movs	r1, r3
 8000980:	230f      	movs	r3, #15
 8000982:	400b      	ands	r3, r1
 8000984:	3b08      	subs	r3, #8
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	3306      	adds	r3, #6
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	18d3      	adds	r3, r2, r3
 800098e:	3304      	adds	r3, #4
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1dfa      	adds	r2, r7, #7
 8000994:	7812      	ldrb	r2, [r2, #0]
 8000996:	0011      	movs	r1, r2
 8000998:	2203      	movs	r2, #3
 800099a:	400a      	ands	r2, r1
 800099c:	00d2      	lsls	r2, r2, #3
 800099e:	21ff      	movs	r1, #255	; 0xff
 80009a0:	4091      	lsls	r1, r2
 80009a2:	000a      	movs	r2, r1
 80009a4:	43d2      	mvns	r2, r2
 80009a6:	401a      	ands	r2, r3
 80009a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	019b      	lsls	r3, r3, #6
 80009ae:	22ff      	movs	r2, #255	; 0xff
 80009b0:	401a      	ands	r2, r3
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	0018      	movs	r0, r3
 80009b8:	2303      	movs	r3, #3
 80009ba:	4003      	ands	r3, r0
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <__NVIC_SetPriority+0xd8>)
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	001c      	movs	r4, r3
 80009c8:	230f      	movs	r3, #15
 80009ca:	4023      	ands	r3, r4
 80009cc:	3b08      	subs	r3, #8
 80009ce:	089b      	lsrs	r3, r3, #2
 80009d0:	430a      	orrs	r2, r1
 80009d2:	3306      	adds	r3, #6
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	18c3      	adds	r3, r0, r3
 80009d8:	3304      	adds	r3, #4
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b003      	add	sp, #12
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	e000e100 	.word	0xe000e100
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	4a0c      	ldr	r2, [pc, #48]	; (8000a2c <SysTick_Config+0x40>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d901      	bls.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e010      	b.n	8000a24 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <SysTick_Config+0x44>)
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	3a01      	subs	r2, #1
 8000a08:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	425b      	negs	r3, r3
 8000a0e:	2103      	movs	r1, #3
 8000a10:	0018      	movs	r0, r3
 8000a12:	f7ff ff7d 	bl	8000910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <SysTick_Config+0x44>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SysTick_Config+0x44>)
 8000a1e:	2207      	movs	r2, #7
 8000a20:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	0018      	movs	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b002      	add	sp, #8
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	00ffffff 	.word	0x00ffffff
 8000a30:	e000e010 	.word	0xe000e010

08000a34 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	210f      	movs	r1, #15
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	1c02      	adds	r2, r0, #0
 8000a44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	0011      	movs	r1, r2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff ff5d 	bl	8000910 <__NVIC_SetPriority>
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	0002      	movs	r2, r0
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff ff33 	bl	80008dc <__NVIC_EnableIRQ>
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f7ff ffaf 	bl	80009ec <SysTick_Config>
 8000a8e:	0003      	movs	r3, r0
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e015      	b.n	8000ad6 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	791b      	ldrb	r3, [r3, #4]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d106      	bne.n	8000ac2 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff fd77 	bl	80005b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b002      	add	sp, #8
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d101      	bne.n	8000b30 <HAL_DAC_ConfigChannel+0x20>
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	e029      	b.n	8000b84 <HAL_DAC_ConfigChannel+0x74>
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2201      	movs	r2, #1
 8000b34:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2202      	movs	r2, #2
 8000b3a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8000b44:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <HAL_DAC_ConfigChannel+0x7c>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	409a      	lsls	r2, r3
 8000b4a:	0013      	movs	r3, r2
 8000b4c:	43da      	mvns	r2, r3
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	4013      	ands	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	409a      	lsls	r2, r3
 8000b66:	0013      	movs	r3, r2
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b006      	add	sp, #24
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	00000ffe 	.word	0x00000ffe

08000b90 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	795b      	ldrb	r3, [r3, #5]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d101      	bne.n	8000bae <HAL_DAC_Start_DMA+0x1e>
 8000baa:	2302      	movs	r3, #2
 8000bac:	e092      	b.n	8000cd4 <HAL_DAC_Start_DMA+0x144>
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	711a      	strb	r2, [r3, #4]
  
  if(Channel == DAC_CHANNEL_1)
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d12b      	bne.n	8000c18 <HAL_DAC_Start_DMA+0x88>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	4a45      	ldr	r2, [pc, #276]	; (8000cdc <HAL_DAC_Start_DMA+0x14c>)
 8000bc6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	4a44      	ldr	r2, [pc, #272]	; (8000ce0 <HAL_DAC_Start_DMA+0x150>)
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	4a43      	ldr	r2, [pc, #268]	; (8000ce4 <HAL_DAC_Start_DMA+0x154>)
 8000bd6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	0149      	lsls	r1, r1, #5
 8000be6:	430a      	orrs	r2, r1
 8000be8:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8000bea:	6a3b      	ldr	r3, [r7, #32]
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d009      	beq.n	8000c04 <HAL_DAC_Start_DMA+0x74>
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d00c      	beq.n	8000c0e <HAL_DAC_Start_DMA+0x7e>
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d000      	beq.n	8000bfa <HAL_DAC_Start_DMA+0x6a>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000bf8:	e03a      	b.n	8000c70 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3308      	adds	r3, #8
 8000c00:	617b      	str	r3, [r7, #20]
        break;
 8000c02:	e035      	b.n	8000c70 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	330c      	adds	r3, #12
 8000c0a:	617b      	str	r3, [r7, #20]
        break;
 8000c0c:	e030      	b.n	8000c70 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	3310      	adds	r3, #16
 8000c14:	617b      	str	r3, [r7, #20]
        break;
 8000c16:	e02b      	b.n	8000c70 <HAL_DAC_Start_DMA+0xe0>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	4a32      	ldr	r2, [pc, #200]	; (8000ce8 <HAL_DAC_Start_DMA+0x158>)
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	4a31      	ldr	r2, [pc, #196]	; (8000cec <HAL_DAC_Start_DMA+0x15c>)
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	4a30      	ldr	r2, [pc, #192]	; (8000cf0 <HAL_DAC_Start_DMA+0x160>)
 8000c2e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	0549      	lsls	r1, r1, #21
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 2 */
    switch(Alignment)
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d009      	beq.n	8000c5c <HAL_DAC_Start_DMA+0xcc>
 8000c48:	2b08      	cmp	r3, #8
 8000c4a:	d00c      	beq.n	8000c66 <HAL_DAC_Start_DMA+0xd6>
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d000      	beq.n	8000c52 <HAL_DAC_Start_DMA+0xc2>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000c50:	e00e      	b.n	8000c70 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3314      	adds	r3, #20
 8000c58:	617b      	str	r3, [r7, #20]
        break;
 8000c5a:	e009      	b.n	8000c70 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3318      	adds	r3, #24
 8000c62:	617b      	str	r3, [r7, #20]
        break;
 8000c64:	e004      	b.n	8000c70 <HAL_DAC_Start_DMA+0xe0>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	331c      	adds	r3, #28
 8000c6c:	617b      	str	r3, [r7, #20]
        break;
 8000c6e:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d110      	bne.n	8000c98 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2180      	movs	r1, #128	; 0x80
 8000c82:	0189      	lsls	r1, r1, #6
 8000c84:	430a      	orrs	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6898      	ldr	r0, [r3, #8]
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	f000 f901 	bl	8000e98 <HAL_DMA_Start_IT>
 8000c96:	e00f      	b.n	8000cb8 <HAL_DAC_Start_DMA+0x128>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2180      	movs	r1, #128	; 0x80
 8000ca4:	0589      	lsls	r1, r1, #22
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	68d8      	ldr	r0, [r3, #12]
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	f000 f8f0 	bl	8000e98 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6819      	ldr	r1, [r3, #0]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b006      	add	sp, #24
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	08000cf5 	.word	0x08000cf5
 8000ce0:	08000d19 	.word	0x08000d19
 8000ce4:	08000d37 	.word	0x08000d37
 8000ce8:	08000d67 	.word	0x08000d67
 8000cec:	08000d8b 	.word	0x08000d8b
 8000cf0:	08000da9 	.word	0x08000da9

08000cf4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	60fb      	str	r3, [r7, #12]
  
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff feea 	bl	8000ade <HAL_DAC_ConvCpltCallbackCh1>
  
  hdac->State= HAL_DAC_STATE_READY;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	711a      	strb	r2, [r3, #4]
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b004      	add	sp, #16
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff fee0 	bl	8000aee <HAL_DAC_ConvHalfCpltCallbackCh1>
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b004      	add	sp, #16
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	2204      	movs	r2, #4
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff fed3 	bl	8000afe <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	711a      	strb	r2, [r3, #4]
}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b004      	add	sp, #16
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 f82e 	bl	8000dd8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	711a      	strb	r2, [r3, #4]
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 f824 	bl	8000de8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b004      	add	sp, #16
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	2204      	movs	r2, #4
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 f817 	bl	8000df8 <HAL_DACEx_ErrorCallbackCh2>
#endif 
  hdac->State= HAL_DAC_STATE_READY;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	711a      	strb	r2, [r3, #4]
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b004      	add	sp, #16
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b002      	add	sp, #8
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b002      	add	sp, #8
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b002      	add	sp, #8
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e036      	b.n	8000e8c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2221      	movs	r2, #33	; 0x21
 8000e22:	2102      	movs	r1, #2
 8000e24:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <HAL_DMA_Init+0x8c>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 f946 	bl	8001100 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2221      	movs	r2, #33	; 0x21
 8000e7e:	2101      	movs	r1, #1
 8000e80:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2220      	movs	r2, #32
 8000e86:	2100      	movs	r1, #0
 8000e88:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}  
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b004      	add	sp, #16
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	ffffc00f 	.word	0xffffc00f

08000e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000ea6:	2317      	movs	r3, #23
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	5c9b      	ldrb	r3, [r3, r2]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d101      	bne.n	8000ebc <HAL_DMA_Start_IT+0x24>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e04f      	b.n	8000f5c <HAL_DMA_Start_IT+0xc4>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2221      	movs	r2, #33	; 0x21
 8000ec8:	5c9b      	ldrb	r3, [r3, r2]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d13a      	bne.n	8000f46 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2221      	movs	r2, #33	; 0x21
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2200      	movs	r2, #0
 8000edc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	438a      	bics	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f000 f8d7 	bl	80010a8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d008      	beq.n	8000f14 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	210e      	movs	r1, #14
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e00f      	b.n	8000f34 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	210a      	movs	r1, #10
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2104      	movs	r1, #4
 8000f30:	438a      	bics	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2101      	movs	r1, #1
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e007      	b.n	8000f56 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000f4e:	2317      	movs	r3, #23
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	2202      	movs	r2, #2
 8000f54:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000f56:	2317      	movs	r3, #23
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	781b      	ldrb	r3, [r3, #0]
} 
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b006      	add	sp, #24
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	2204      	movs	r2, #4
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d024      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0x72>
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	2204      	movs	r2, #4
 8000f90:	4013      	ands	r3, r2
 8000f92:	d020      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d107      	bne.n	8000fb0 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2104      	movs	r1, #4
 8000fac:	438a      	bics	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb8:	2104      	movs	r1, #4
 8000fba:	4091      	lsls	r1, r2
 8000fbc:	000a      	movs	r2, r1
 8000fbe:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d100      	bne.n	8000fca <HAL_DMA_IRQHandler+0x66>
 8000fc8:	e06a      	b.n	80010a0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	0010      	movs	r0, r2
 8000fd2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000fd4:	e064      	b.n	80010a0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	2202      	movs	r2, #2
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	0013      	movs	r3, r2
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d02b      	beq.n	800103e <HAL_DMA_IRQHandler+0xda>
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2202      	movs	r2, #2
 8000fea:	4013      	ands	r3, r2
 8000fec:	d027      	beq.n	800103e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d10b      	bne.n	8001012 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	210a      	movs	r1, #10
 8001006:	438a      	bics	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2221      	movs	r2, #33	; 0x21
 800100e:	2101      	movs	r1, #1
 8001010:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101a:	2102      	movs	r1, #2
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2220      	movs	r2, #32
 8001026:	2100      	movs	r1, #0
 8001028:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102e:	2b00      	cmp	r3, #0
 8001030:	d036      	beq.n	80010a0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	0010      	movs	r0, r2
 800103a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800103c:	e030      	b.n	80010a0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	2208      	movs	r2, #8
 8001044:	409a      	lsls	r2, r3
 8001046:	0013      	movs	r3, r2
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4013      	ands	r3, r2
 800104c:	d028      	beq.n	80010a0 <HAL_DMA_IRQHandler+0x13c>
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2208      	movs	r2, #8
 8001052:	4013      	ands	r3, r2
 8001054:	d024      	beq.n	80010a0 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	210e      	movs	r1, #14
 8001062:	438a      	bics	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800106e:	2101      	movs	r1, #1
 8001070:	4091      	lsls	r1, r2
 8001072:	000a      	movs	r2, r1
 8001074:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2221      	movs	r2, #33	; 0x21
 8001080:	2101      	movs	r1, #1
 8001082:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2220      	movs	r2, #32
 8001088:	2100      	movs	r1, #0
 800108a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	0010      	movs	r0, r2
 800109c:	4798      	blx	r3
    }
   }
}  
 800109e:	e7ff      	b.n	80010a0 <HAL_DMA_IRQHandler+0x13c>
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b004      	add	sp, #16
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010be:	2101      	movs	r1, #1
 80010c0:	4091      	lsls	r1, r2
 80010c2:	000a      	movs	r2, r1
 80010c4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b10      	cmp	r3, #16
 80010d4:	d108      	bne.n	80010e8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010e6:	e007      	b.n	80010f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	60da      	str	r2, [r3, #12]
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b004      	add	sp, #16
 80010fe:	bd80      	pop	{r7, pc}

08001100 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a08      	ldr	r2, [pc, #32]	; (8001130 <DMA_CalcBaseAndBitshift+0x30>)
 800110e:	4694      	mov	ip, r2
 8001110:	4463      	add	r3, ip
 8001112:	2114      	movs	r1, #20
 8001114:	0018      	movs	r0, r3
 8001116:	f7fe fff7 	bl	8000108 <__udivsi3>
 800111a:	0003      	movs	r3, r0
 800111c:	009a      	lsls	r2, r3, #2
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a03      	ldr	r2, [pc, #12]	; (8001134 <DMA_CalcBaseAndBitshift+0x34>)
 8001126:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b002      	add	sp, #8
 800112e:	bd80      	pop	{r7, pc}
 8001130:	bffdfff8 	.word	0xbffdfff8
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001146:	e155      	b.n	80013f4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2101      	movs	r1, #1
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4091      	lsls	r1, r2
 8001152:	000a      	movs	r2, r1
 8001154:	4013      	ands	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d100      	bne.n	8001160 <HAL_GPIO_Init+0x28>
 800115e:	e146      	b.n	80013ee <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d00b      	beq.n	8001180 <HAL_GPIO_Init+0x48>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d007      	beq.n	8001180 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001174:	2b11      	cmp	r3, #17
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b12      	cmp	r3, #18
 800117e:	d130      	bne.n	80011e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	409a      	lsls	r2, r3
 800118e:	0013      	movs	r3, r2
 8001190:	43da      	mvns	r2, r3
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	409a      	lsls	r2, r3
 80011a2:	0013      	movs	r3, r2
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b6:	2201      	movs	r2, #1
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	43da      	mvns	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	091b      	lsrs	r3, r3, #4
 80011cc:	2201      	movs	r2, #1
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	409a      	lsls	r2, r3
 80011f0:	0013      	movs	r3, r2
 80011f2:	43da      	mvns	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	409a      	lsls	r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0xea>
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b12      	cmp	r3, #18
 8001220:	d123      	bne.n	800126a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	58d3      	ldr	r3, [r2, r3]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2207      	movs	r2, #7
 8001234:	4013      	ands	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	43da      	mvns	r2, r3
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2107      	movs	r1, #7
 800124e:	400b      	ands	r3, r1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	08da      	lsrs	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3208      	adds	r2, #8
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	6939      	ldr	r1, [r7, #16]
 8001268:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	43da      	mvns	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2203      	movs	r2, #3
 8001288:	401a      	ands	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	409a      	lsls	r2, r3
 8001290:	0013      	movs	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	055b      	lsls	r3, r3, #21
 80012a6:	4013      	ands	r3, r2
 80012a8:	d100      	bne.n	80012ac <HAL_GPIO_Init+0x174>
 80012aa:	e0a0      	b.n	80013ee <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ac:	4b57      	ldr	r3, [pc, #348]	; (800140c <HAL_GPIO_Init+0x2d4>)
 80012ae:	699a      	ldr	r2, [r3, #24]
 80012b0:	4b56      	ldr	r3, [pc, #344]	; (800140c <HAL_GPIO_Init+0x2d4>)
 80012b2:	2101      	movs	r1, #1
 80012b4:	430a      	orrs	r2, r1
 80012b6:	619a      	str	r2, [r3, #24]
 80012b8:	4b54      	ldr	r3, [pc, #336]	; (800140c <HAL_GPIO_Init+0x2d4>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	2201      	movs	r2, #1
 80012be:	4013      	ands	r3, r2
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012c4:	4a52      	ldr	r2, [pc, #328]	; (8001410 <HAL_GPIO_Init+0x2d8>)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	589b      	ldr	r3, [r3, r2]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	2203      	movs	r2, #3
 80012d6:	4013      	ands	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	409a      	lsls	r2, r3
 80012de:	0013      	movs	r3, r2
 80012e0:	43da      	mvns	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	2390      	movs	r3, #144	; 0x90
 80012ec:	05db      	lsls	r3, r3, #23
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d019      	beq.n	8001326 <HAL_GPIO_Init+0x1ee>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a47      	ldr	r2, [pc, #284]	; (8001414 <HAL_GPIO_Init+0x2dc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0x1ea>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a46      	ldr	r2, [pc, #280]	; (8001418 <HAL_GPIO_Init+0x2e0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00d      	beq.n	800131e <HAL_GPIO_Init+0x1e6>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a45      	ldr	r2, [pc, #276]	; (800141c <HAL_GPIO_Init+0x2e4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0x1e2>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a44      	ldr	r2, [pc, #272]	; (8001420 <HAL_GPIO_Init+0x2e8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_GPIO_Init+0x1de>
 8001312:	2304      	movs	r3, #4
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x1f0>
 8001316:	2305      	movs	r3, #5
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x1f0>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x1f0>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x1f0>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x1f0>
 8001326:	2300      	movs	r3, #0
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	2103      	movs	r1, #3
 800132c:	400a      	ands	r2, r1
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001338:	4935      	ldr	r1, [pc, #212]	; (8001410 <HAL_GPIO_Init+0x2d8>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <HAL_GPIO_Init+0x2ec>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	4013      	ands	r3, r2
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800136a:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <HAL_GPIO_Init+0x2ec>)
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001370:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <HAL_GPIO_Init+0x2ec>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43da      	mvns	r2, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	029b      	lsls	r3, r3, #10
 8001388:	4013      	ands	r3, r2
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001394:	4b23      	ldr	r3, [pc, #140]	; (8001424 <HAL_GPIO_Init+0x2ec>)
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <HAL_GPIO_Init+0x2ec>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43da      	mvns	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	035b      	lsls	r3, r3, #13
 80013b2:	4013      	ands	r3, r2
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_GPIO_Init+0x2ec>)
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_GPIO_Init+0x2ec>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43da      	mvns	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	039b      	lsls	r3, r3, #14
 80013dc:	4013      	ands	r3, r2
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_GPIO_Init+0x2ec>)
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	40da      	lsrs	r2, r3
 80013fc:	1e13      	subs	r3, r2, #0
 80013fe:	d000      	beq.n	8001402 <HAL_GPIO_Init+0x2ca>
 8001400:	e6a2      	b.n	8001148 <HAL_GPIO_Init+0x10>
  } 
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b006      	add	sp, #24
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	48000400 	.word	0x48000400
 8001418:	48000800 	.word	0x48000800
 800141c:	48000c00 	.word	0x48000c00
 8001420:	48001000 	.word	0x48001000
 8001424:	40010400 	.word	0x40010400

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	0008      	movs	r0, r1
 8001432:	0011      	movs	r1, r2
 8001434:	1cbb      	adds	r3, r7, #2
 8001436:	1c02      	adds	r2, r0, #0
 8001438:	801a      	strh	r2, [r3, #0]
 800143a:	1c7b      	adds	r3, r7, #1
 800143c:	1c0a      	adds	r2, r1, #0
 800143e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001440:	1c7b      	adds	r3, r7, #1
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d004      	beq.n	8001452 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001448:	1cbb      	adds	r3, r7, #2
 800144a:	881a      	ldrh	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001450:	e003      	b.n	800145a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001452:	1cbb      	adds	r3, r7, #2
 8001454:	881a      	ldrh	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b002      	add	sp, #8
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	f000 fb76 	bl	8001b64 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2201      	movs	r2, #1
 800147e:	4013      	ands	r3, r2
 8001480:	d100      	bne.n	8001484 <HAL_RCC_OscConfig+0x20>
 8001482:	e08e      	b.n	80015a2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001484:	4bc5      	ldr	r3, [pc, #788]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	220c      	movs	r2, #12
 800148a:	4013      	ands	r3, r2
 800148c:	2b04      	cmp	r3, #4
 800148e:	d00e      	beq.n	80014ae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001490:	4bc2      	ldr	r3, [pc, #776]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	220c      	movs	r2, #12
 8001496:	4013      	ands	r3, r2
 8001498:	2b08      	cmp	r3, #8
 800149a:	d117      	bne.n	80014cc <HAL_RCC_OscConfig+0x68>
 800149c:	4bbf      	ldr	r3, [pc, #764]	; (800179c <HAL_RCC_OscConfig+0x338>)
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	23c0      	movs	r3, #192	; 0xc0
 80014a2:	025b      	lsls	r3, r3, #9
 80014a4:	401a      	ands	r2, r3
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	025b      	lsls	r3, r3, #9
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d10e      	bne.n	80014cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ae:	4bbb      	ldr	r3, [pc, #748]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	029b      	lsls	r3, r3, #10
 80014b6:	4013      	ands	r3, r2
 80014b8:	d100      	bne.n	80014bc <HAL_RCC_OscConfig+0x58>
 80014ba:	e071      	b.n	80015a0 <HAL_RCC_OscConfig+0x13c>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d000      	beq.n	80014c6 <HAL_RCC_OscConfig+0x62>
 80014c4:	e06c      	b.n	80015a0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f000 fb4c 	bl	8001b64 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_OscConfig+0x80>
 80014d4:	4bb1      	ldr	r3, [pc, #708]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4bb0      	ldr	r3, [pc, #704]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	0249      	lsls	r1, r1, #9
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e02f      	b.n	8001544 <HAL_RCC_OscConfig+0xe0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10c      	bne.n	8001506 <HAL_RCC_OscConfig+0xa2>
 80014ec:	4bab      	ldr	r3, [pc, #684]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4baa      	ldr	r3, [pc, #680]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80014f2:	49ab      	ldr	r1, [pc, #684]	; (80017a0 <HAL_RCC_OscConfig+0x33c>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	4ba8      	ldr	r3, [pc, #672]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4ba7      	ldr	r3, [pc, #668]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80014fe:	49a9      	ldr	r1, [pc, #676]	; (80017a4 <HAL_RCC_OscConfig+0x340>)
 8001500:	400a      	ands	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	e01e      	b.n	8001544 <HAL_RCC_OscConfig+0xe0>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b05      	cmp	r3, #5
 800150c:	d10e      	bne.n	800152c <HAL_RCC_OscConfig+0xc8>
 800150e:	4ba3      	ldr	r3, [pc, #652]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4ba2      	ldr	r3, [pc, #648]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001514:	2180      	movs	r1, #128	; 0x80
 8001516:	02c9      	lsls	r1, r1, #11
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	4b9f      	ldr	r3, [pc, #636]	; (800179c <HAL_RCC_OscConfig+0x338>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b9e      	ldr	r3, [pc, #632]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	0249      	lsls	r1, r1, #9
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e00b      	b.n	8001544 <HAL_RCC_OscConfig+0xe0>
 800152c:	4b9b      	ldr	r3, [pc, #620]	; (800179c <HAL_RCC_OscConfig+0x338>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b9a      	ldr	r3, [pc, #616]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001532:	499b      	ldr	r1, [pc, #620]	; (80017a0 <HAL_RCC_OscConfig+0x33c>)
 8001534:	400a      	ands	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	4b98      	ldr	r3, [pc, #608]	; (800179c <HAL_RCC_OscConfig+0x338>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b97      	ldr	r3, [pc, #604]	; (800179c <HAL_RCC_OscConfig+0x338>)
 800153e:	4999      	ldr	r1, [pc, #612]	; (80017a4 <HAL_RCC_OscConfig+0x340>)
 8001540:	400a      	ands	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d014      	beq.n	8001576 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff f9bc 	bl	80008c8 <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001556:	f7ff f9b7 	bl	80008c8 <HAL_GetTick>
 800155a:	0002      	movs	r2, r0
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b64      	cmp	r3, #100	; 0x64
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e2fd      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001568:	4b8c      	ldr	r3, [pc, #560]	; (800179c <HAL_RCC_OscConfig+0x338>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	029b      	lsls	r3, r3, #10
 8001570:	4013      	ands	r3, r2
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0xf2>
 8001574:	e015      	b.n	80015a2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff f9a7 	bl	80008c8 <HAL_GetTick>
 800157a:	0003      	movs	r3, r0
 800157c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff f9a2 	bl	80008c8 <HAL_GetTick>
 8001584:	0002      	movs	r2, r0
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	; 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e2e8      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001592:	4b82      	ldr	r3, [pc, #520]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	029b      	lsls	r3, r3, #10
 800159a:	4013      	ands	r3, r2
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x11c>
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2202      	movs	r2, #2
 80015a8:	4013      	ands	r3, r2
 80015aa:	d100      	bne.n	80015ae <HAL_RCC_OscConfig+0x14a>
 80015ac:	e06c      	b.n	8001688 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015ae:	4b7b      	ldr	r3, [pc, #492]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	220c      	movs	r2, #12
 80015b4:	4013      	ands	r3, r2
 80015b6:	d00e      	beq.n	80015d6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015b8:	4b78      	ldr	r3, [pc, #480]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	220c      	movs	r2, #12
 80015be:	4013      	ands	r3, r2
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d11f      	bne.n	8001604 <HAL_RCC_OscConfig+0x1a0>
 80015c4:	4b75      	ldr	r3, [pc, #468]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	23c0      	movs	r3, #192	; 0xc0
 80015ca:	025b      	lsls	r3, r3, #9
 80015cc:	401a      	ands	r2, r3
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d116      	bne.n	8001604 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	4b71      	ldr	r3, [pc, #452]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2202      	movs	r2, #2
 80015dc:	4013      	ands	r3, r2
 80015de:	d005      	beq.n	80015ec <HAL_RCC_OscConfig+0x188>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e2bb      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ec:	4b6b      	ldr	r3, [pc, #428]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	22f8      	movs	r2, #248	; 0xf8
 80015f2:	4393      	bics	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00da      	lsls	r2, r3, #3
 80015fc:	4b67      	ldr	r3, [pc, #412]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	e041      	b.n	8001688 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d024      	beq.n	8001656 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800160c:	4b63      	ldr	r3, [pc, #396]	; (800179c <HAL_RCC_OscConfig+0x338>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b62      	ldr	r3, [pc, #392]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001612:	2101      	movs	r1, #1
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff f956 	bl	80008c8 <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff f951 	bl	80008c8 <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e297      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	4b59      	ldr	r3, [pc, #356]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2202      	movs	r2, #2
 800163a:	4013      	ands	r3, r2
 800163c:	d0f1      	beq.n	8001622 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163e:	4b57      	ldr	r3, [pc, #348]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	22f8      	movs	r2, #248	; 0xf8
 8001644:	4393      	bics	r3, r2
 8001646:	0019      	movs	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	00da      	lsls	r2, r3, #3
 800164e:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e018      	b.n	8001688 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001656:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_RCC_OscConfig+0x338>)
 800165c:	2101      	movs	r1, #1
 800165e:	438a      	bics	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff f931 	bl	80008c8 <HAL_GetTick>
 8001666:	0003      	movs	r3, r0
 8001668:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800166c:	f7ff f92c 	bl	80008c8 <HAL_GetTick>
 8001670:	0002      	movs	r2, r0
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e272      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2202      	movs	r2, #2
 8001684:	4013      	ands	r3, r2
 8001686:	d1f1      	bne.n	800166c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2208      	movs	r2, #8
 800168e:	4013      	ands	r3, r2
 8001690:	d036      	beq.n	8001700 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d019      	beq.n	80016ce <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169a:	4b40      	ldr	r3, [pc, #256]	; (800179c <HAL_RCC_OscConfig+0x338>)
 800169c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169e:	4b3f      	ldr	r3, [pc, #252]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a6:	f7ff f90f 	bl	80008c8 <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b0:	f7ff f90a 	bl	80008c8 <HAL_GetTick>
 80016b4:	0002      	movs	r2, r0
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e250      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	4b36      	ldr	r3, [pc, #216]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	2202      	movs	r2, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d0f1      	beq.n	80016b0 <HAL_RCC_OscConfig+0x24c>
 80016cc:	e018      	b.n	8001700 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80016d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d2:	4b32      	ldr	r3, [pc, #200]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80016d4:	2101      	movs	r1, #1
 80016d6:	438a      	bics	r2, r1
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff f8f5 	bl	80008c8 <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e4:	f7ff f8f0 	bl	80008c8 <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e236      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <HAL_RCC_OscConfig+0x338>)
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	2202      	movs	r2, #2
 80016fc:	4013      	ands	r3, r2
 80016fe:	d1f1      	bne.n	80016e4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2204      	movs	r2, #4
 8001706:	4013      	ands	r3, r2
 8001708:	d100      	bne.n	800170c <HAL_RCC_OscConfig+0x2a8>
 800170a:	e0b5      	b.n	8001878 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170c:	231f      	movs	r3, #31
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001716:	69da      	ldr	r2, [r3, #28]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	055b      	lsls	r3, r3, #21
 800171c:	4013      	ands	r3, r2
 800171e:	d111      	bne.n	8001744 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001722:	69da      	ldr	r2, [r3, #28]
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001726:	2180      	movs	r1, #128	; 0x80
 8001728:	0549      	lsls	r1, r1, #21
 800172a:	430a      	orrs	r2, r1
 800172c:	61da      	str	r2, [r3, #28]
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001730:	69da      	ldr	r2, [r3, #28]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	055b      	lsls	r3, r3, #21
 8001736:	4013      	ands	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800173c:	231f      	movs	r3, #31
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_RCC_OscConfig+0x344>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4013      	ands	r3, r2
 800174e:	d11a      	bne.n	8001786 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_RCC_OscConfig+0x344>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_RCC_OscConfig+0x344>)
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	0049      	lsls	r1, r1, #1
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175e:	f7ff f8b3 	bl	80008c8 <HAL_GetTick>
 8001762:	0003      	movs	r3, r0
 8001764:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001768:	f7ff f8ae 	bl	80008c8 <HAL_GetTick>
 800176c:	0002      	movs	r2, r0
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1f4      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_OscConfig+0x344>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4013      	ands	r3, r2
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d10e      	bne.n	80017ac <HAL_RCC_OscConfig+0x348>
 800178e:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001790:	6a1a      	ldr	r2, [r3, #32]
 8001792:	4b02      	ldr	r3, [pc, #8]	; (800179c <HAL_RCC_OscConfig+0x338>)
 8001794:	2101      	movs	r1, #1
 8001796:	430a      	orrs	r2, r1
 8001798:	621a      	str	r2, [r3, #32]
 800179a:	e035      	b.n	8001808 <HAL_RCC_OscConfig+0x3a4>
 800179c:	40021000 	.word	0x40021000
 80017a0:	fffeffff 	.word	0xfffeffff
 80017a4:	fffbffff 	.word	0xfffbffff
 80017a8:	40007000 	.word	0x40007000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10c      	bne.n	80017ce <HAL_RCC_OscConfig+0x36a>
 80017b4:	4bca      	ldr	r3, [pc, #808]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	4bc9      	ldr	r3, [pc, #804]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	438a      	bics	r2, r1
 80017be:	621a      	str	r2, [r3, #32]
 80017c0:	4bc7      	ldr	r3, [pc, #796]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80017c2:	6a1a      	ldr	r2, [r3, #32]
 80017c4:	4bc6      	ldr	r3, [pc, #792]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80017c6:	2104      	movs	r1, #4
 80017c8:	438a      	bics	r2, r1
 80017ca:	621a      	str	r2, [r3, #32]
 80017cc:	e01c      	b.n	8001808 <HAL_RCC_OscConfig+0x3a4>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x38c>
 80017d6:	4bc2      	ldr	r3, [pc, #776]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80017d8:	6a1a      	ldr	r2, [r3, #32]
 80017da:	4bc1      	ldr	r3, [pc, #772]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80017dc:	2104      	movs	r1, #4
 80017de:	430a      	orrs	r2, r1
 80017e0:	621a      	str	r2, [r3, #32]
 80017e2:	4bbf      	ldr	r3, [pc, #764]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80017e4:	6a1a      	ldr	r2, [r3, #32]
 80017e6:	4bbe      	ldr	r3, [pc, #760]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80017e8:	2101      	movs	r1, #1
 80017ea:	430a      	orrs	r2, r1
 80017ec:	621a      	str	r2, [r3, #32]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0x3a4>
 80017f0:	4bbb      	ldr	r3, [pc, #748]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80017f2:	6a1a      	ldr	r2, [r3, #32]
 80017f4:	4bba      	ldr	r3, [pc, #744]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80017f6:	2101      	movs	r1, #1
 80017f8:	438a      	bics	r2, r1
 80017fa:	621a      	str	r2, [r3, #32]
 80017fc:	4bb8      	ldr	r3, [pc, #736]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	4bb7      	ldr	r3, [pc, #732]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001802:	2104      	movs	r1, #4
 8001804:	438a      	bics	r2, r1
 8001806:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d014      	beq.n	800183a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001810:	f7ff f85a 	bl	80008c8 <HAL_GetTick>
 8001814:	0003      	movs	r3, r0
 8001816:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001818:	e009      	b.n	800182e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff f855 	bl	80008c8 <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	4aaf      	ldr	r2, [pc, #700]	; (8001ae4 <HAL_RCC_OscConfig+0x680>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e19a      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182e:	4bac      	ldr	r3, [pc, #688]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x3b6>
 8001838:	e013      	b.n	8001862 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183a:	f7ff f845 	bl	80008c8 <HAL_GetTick>
 800183e:	0003      	movs	r3, r0
 8001840:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001842:	e009      	b.n	8001858 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f7ff f840 	bl	80008c8 <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	4aa5      	ldr	r2, [pc, #660]	; (8001ae4 <HAL_RCC_OscConfig+0x680>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e185      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001858:	4ba1      	ldr	r3, [pc, #644]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	2202      	movs	r2, #2
 800185e:	4013      	ands	r3, r2
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001862:	231f      	movs	r3, #31
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186c:	4b9c      	ldr	r3, [pc, #624]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 800186e:	69da      	ldr	r2, [r3, #28]
 8001870:	4b9b      	ldr	r3, [pc, #620]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001872:	499d      	ldr	r1, [pc, #628]	; (8001ae8 <HAL_RCC_OscConfig+0x684>)
 8001874:	400a      	ands	r2, r1
 8001876:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2210      	movs	r2, #16
 800187e:	4013      	ands	r3, r2
 8001880:	d063      	beq.n	800194a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d12a      	bne.n	80018e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800188a:	4b95      	ldr	r3, [pc, #596]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 800188c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188e:	4b94      	ldr	r3, [pc, #592]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001890:	2104      	movs	r1, #4
 8001892:	430a      	orrs	r2, r1
 8001894:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001896:	4b92      	ldr	r3, [pc, #584]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189a:	4b91      	ldr	r3, [pc, #580]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 800189c:	2101      	movs	r1, #1
 800189e:	430a      	orrs	r2, r1
 80018a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a2:	f7ff f811 	bl	80008c8 <HAL_GetTick>
 80018a6:	0003      	movs	r3, r0
 80018a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018ac:	f7ff f80c 	bl	80008c8 <HAL_GetTick>
 80018b0:	0002      	movs	r2, r0
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e152      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018be:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80018c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c2:	2202      	movs	r2, #2
 80018c4:	4013      	ands	r3, r2
 80018c6:	d0f1      	beq.n	80018ac <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018c8:	4b85      	ldr	r3, [pc, #532]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018cc:	22f8      	movs	r2, #248	; 0xf8
 80018ce:	4393      	bics	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	00da      	lsls	r2, r3, #3
 80018d8:	4b81      	ldr	r3, [pc, #516]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80018da:	430a      	orrs	r2, r1
 80018dc:	635a      	str	r2, [r3, #52]	; 0x34
 80018de:	e034      	b.n	800194a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	3305      	adds	r3, #5
 80018e6:	d111      	bne.n	800190c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018e8:	4b7d      	ldr	r3, [pc, #500]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80018ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ec:	4b7c      	ldr	r3, [pc, #496]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80018ee:	2104      	movs	r1, #4
 80018f0:	438a      	bics	r2, r1
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018f4:	4b7a      	ldr	r3, [pc, #488]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80018f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f8:	22f8      	movs	r2, #248	; 0xf8
 80018fa:	4393      	bics	r3, r2
 80018fc:	0019      	movs	r1, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	00da      	lsls	r2, r3, #3
 8001904:	4b76      	ldr	r3, [pc, #472]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001906:	430a      	orrs	r2, r1
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
 800190a:	e01e      	b.n	800194a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800190c:	4b74      	ldr	r3, [pc, #464]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 800190e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001910:	4b73      	ldr	r3, [pc, #460]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001912:	2104      	movs	r1, #4
 8001914:	430a      	orrs	r2, r1
 8001916:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001918:	4b71      	ldr	r3, [pc, #452]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 800191a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800191c:	4b70      	ldr	r3, [pc, #448]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 800191e:	2101      	movs	r1, #1
 8001920:	438a      	bics	r2, r1
 8001922:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7fe ffd0 	bl	80008c8 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800192e:	f7fe ffcb 	bl	80008c8 <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e111      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001940:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	d1f1      	bne.n	800192e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2220      	movs	r2, #32
 8001950:	4013      	ands	r3, r2
 8001952:	d05c      	beq.n	8001a0e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001954:	4b62      	ldr	r3, [pc, #392]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	220c      	movs	r2, #12
 800195a:	4013      	ands	r3, r2
 800195c:	2b0c      	cmp	r3, #12
 800195e:	d00e      	beq.n	800197e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001960:	4b5f      	ldr	r3, [pc, #380]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	220c      	movs	r2, #12
 8001966:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001968:	2b08      	cmp	r3, #8
 800196a:	d114      	bne.n	8001996 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800196c:	4b5c      	ldr	r3, [pc, #368]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	23c0      	movs	r3, #192	; 0xc0
 8001972:	025b      	lsls	r3, r3, #9
 8001974:	401a      	ands	r2, r3
 8001976:	23c0      	movs	r3, #192	; 0xc0
 8001978:	025b      	lsls	r3, r3, #9
 800197a:	429a      	cmp	r2, r3
 800197c:	d10b      	bne.n	8001996 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800197e:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	025b      	lsls	r3, r3, #9
 8001986:	4013      	ands	r3, r2
 8001988:	d040      	beq.n	8001a0c <HAL_RCC_OscConfig+0x5a8>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d03c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e0e6      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d01b      	beq.n	80019d6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800199e:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80019a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a2:	4b4f      	ldr	r3, [pc, #316]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0249      	lsls	r1, r1, #9
 80019a8:	430a      	orrs	r2, r1
 80019aa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7fe ff8c 	bl	80008c8 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b6:	f7fe ff87 	bl	80008c8 <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0cd      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019c8:	4b45      	ldr	r3, [pc, #276]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80019ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	025b      	lsls	r3, r3, #9
 80019d0:	4013      	ands	r3, r2
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x552>
 80019d4:	e01b      	b.n	8001a0e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80019d6:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80019d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019da:	4b41      	ldr	r3, [pc, #260]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 80019dc:	4943      	ldr	r1, [pc, #268]	; (8001aec <HAL_RCC_OscConfig+0x688>)
 80019de:	400a      	ands	r2, r1
 80019e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7fe ff71 	bl	80008c8 <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ec:	f7fe ff6c 	bl	80008c8 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e0b2      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019fe:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	025b      	lsls	r3, r3, #9
 8001a06:	4013      	ands	r3, r2
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x588>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a0c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d100      	bne.n	8001a18 <HAL_RCC_OscConfig+0x5b4>
 8001a16:	e0a4      	b.n	8001b62 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	220c      	movs	r2, #12
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d100      	bne.n	8001a26 <HAL_RCC_OscConfig+0x5c2>
 8001a24:	e078      	b.n	8001b18 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d14c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001a34:	492e      	ldr	r1, [pc, #184]	; (8001af0 <HAL_RCC_OscConfig+0x68c>)
 8001a36:	400a      	ands	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7fe ff45 	bl	80008c8 <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a44:	f7fe ff40 	bl	80008c8 <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e086      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	049b      	lsls	r3, r3, #18
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a62:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	220f      	movs	r2, #15
 8001a68:	4393      	bics	r3, r2
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001a72:	430a      	orrs	r2, r1
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4a1e      	ldr	r2, [pc, #120]	; (8001af4 <HAL_RCC_OscConfig+0x690>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	0019      	movs	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	0449      	lsls	r1, r1, #17
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7fe ff13 	bl	80008c8 <HAL_GetTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7fe ff0e 	bl	80008c8 <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e054      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	049b      	lsls	r3, r3, #18
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x644>
 8001ac6:	e04c      	b.n	8001b62 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <HAL_RCC_OscConfig+0x67c>)
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <HAL_RCC_OscConfig+0x68c>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7fe fef8 	bl	80008c8 <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001adc:	e015      	b.n	8001b0a <HAL_RCC_OscConfig+0x6a6>
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	00001388 	.word	0x00001388
 8001ae8:	efffffff 	.word	0xefffffff
 8001aec:	fffeffff 	.word	0xfffeffff
 8001af0:	feffffff 	.word	0xfeffffff
 8001af4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af8:	f7fe fee6 	bl	80008c8 <HAL_GetTick>
 8001afc:	0002      	movs	r2, r0
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e02c      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_RCC_OscConfig+0x708>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	049b      	lsls	r3, r3, #18
 8001b12:	4013      	ands	r3, r2
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x694>
 8001b16:	e024      	b.n	8001b62 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e01f      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_RCC_OscConfig+0x708>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_RCC_OscConfig+0x708>)
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	23c0      	movs	r3, #192	; 0xc0
 8001b34:	025b      	lsls	r3, r3, #9
 8001b36:	401a      	ands	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d10e      	bne.n	8001b5e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	220f      	movs	r2, #15
 8001b44:	401a      	ands	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	23f0      	movs	r3, #240	; 0xf0
 8001b52:	039b      	lsls	r3, r3, #14
 8001b54:	401a      	ands	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d001      	beq.n	8001b62 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b008      	add	sp, #32
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0bf      	b.n	8001d04 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b61      	ldr	r3, [pc, #388]	; (8001d0c <HAL_RCC_ClockConfig+0x19c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d911      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b5e      	ldr	r3, [pc, #376]	; (8001d0c <HAL_RCC_ClockConfig+0x19c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2201      	movs	r2, #1
 8001b98:	4393      	bics	r3, r2
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	4b5b      	ldr	r3, [pc, #364]	; (8001d0c <HAL_RCC_ClockConfig+0x19c>)
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba4:	4b59      	ldr	r3, [pc, #356]	; (8001d0c <HAL_RCC_ClockConfig+0x19c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4013      	ands	r3, r2
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0a6      	b.n	8001d04 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d015      	beq.n	8001bec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d006      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bca:	4b51      	ldr	r3, [pc, #324]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001bd0:	21e0      	movs	r1, #224	; 0xe0
 8001bd2:	00c9      	lsls	r1, r1, #3
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	22f0      	movs	r2, #240	; 0xf0
 8001bde:	4393      	bics	r3, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d04c      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b44      	ldr	r3, [pc, #272]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	029b      	lsls	r3, r3, #10
 8001c06:	4013      	ands	r3, r2
 8001c08:	d120      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e07a      	b.n	8001d04 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c16:	4b3e      	ldr	r3, [pc, #248]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	049b      	lsls	r3, r3, #18
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d114      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e06e      	b.n	8001d04 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c2e:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	025b      	lsls	r3, r3, #9
 8001c36:	4013      	ands	r3, r2
 8001c38:	d108      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e062      	b.n	8001d04 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3e:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2202      	movs	r2, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e05b      	b.n	8001d04 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4c:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2203      	movs	r2, #3
 8001c52:	4393      	bics	r3, r2
 8001c54:	0019      	movs	r1, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c60:	f7fe fe32 	bl	80008c8 <HAL_GetTick>
 8001c64:	0003      	movs	r3, r0
 8001c66:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c68:	e009      	b.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6a:	f7fe fe2d 	bl	80008c8 <HAL_GetTick>
 8001c6e:	0002      	movs	r2, r0
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	4a27      	ldr	r2, [pc, #156]	; (8001d14 <HAL_RCC_ClockConfig+0x1a4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e042      	b.n	8001d04 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	220c      	movs	r2, #12
 8001c84:	401a      	ands	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d1ec      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_RCC_ClockConfig+0x19c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2201      	movs	r2, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d211      	bcs.n	8001cc2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_RCC_ClockConfig+0x19c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4393      	bics	r3, r2
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <HAL_RCC_ClockConfig+0x19c>)
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_RCC_ClockConfig+0x19c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e020      	b.n	8001d04 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d009      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_RCC_ClockConfig+0x1a8>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ce0:	f000 f820 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8001ce4:	0001      	movs	r1, r0
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_RCC_ClockConfig+0x1a0>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	220f      	movs	r2, #15
 8001cee:	4013      	ands	r3, r2
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <HAL_RCC_ClockConfig+0x1ac>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	000a      	movs	r2, r1
 8001cf6:	40da      	lsrs	r2, r3
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_ClockConfig+0x1b0>)
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7fe fd9d 	bl	800083c <HAL_InitTick>
  
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	0018      	movs	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b004      	add	sp, #16
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	00001388 	.word	0x00001388
 8001d18:	fffff8ff 	.word	0xfffff8ff
 8001d1c:	08002a88 	.word	0x08002a88
 8001d20:	200000cc 	.word	0x200000cc

08001d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b08f      	sub	sp, #60	; 0x3c
 8001d28:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d2a:	2314      	movs	r3, #20
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	4a37      	ldr	r2, [pc, #220]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xe8>)
 8001d30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d32:	c313      	stmia	r3!, {r0, r1, r4}
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	4a35      	ldr	r2, [pc, #212]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xec>)
 8001d3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d3e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	220c      	movs	r2, #12
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d006      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x52>
 8001d68:	2b0c      	cmp	r3, #12
 8001d6a:	d043      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0xd0>
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d144      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d74:	e044      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d78:	0c9b      	lsrs	r3, r3, #18
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2214      	movs	r2, #20
 8001d80:	18ba      	adds	r2, r7, r2
 8001d82:	5cd3      	ldrb	r3, [r2, r3]
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d86:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	1d3a      	adds	r2, r7, #4
 8001d90:	5cd3      	ldrb	r3, [r2, r3]
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d96:	23c0      	movs	r3, #192	; 0xc0
 8001d98:	025b      	lsls	r3, r3, #9
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	025b      	lsls	r3, r3, #9
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d109      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001da6:	481c      	ldr	r0, [pc, #112]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001da8:	f7fe f9ae 	bl	8000108 <__udivsi3>
 8001dac:	0003      	movs	r3, r0
 8001dae:	001a      	movs	r2, r3
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	4353      	muls	r3, r2
 8001db4:	637b      	str	r3, [r7, #52]	; 0x34
 8001db6:	e01a      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dba:	23c0      	movs	r3, #192	; 0xc0
 8001dbc:	025b      	lsls	r3, r3, #9
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	23c0      	movs	r3, #192	; 0xc0
 8001dc2:	025b      	lsls	r3, r3, #9
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d109      	bne.n	8001ddc <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dca:	4814      	ldr	r0, [pc, #80]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dcc:	f7fe f99c 	bl	8000108 <__udivsi3>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	001a      	movs	r2, r3
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	4353      	muls	r3, r2
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dda:	e008      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dde:	480e      	ldr	r0, [pc, #56]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001de0:	f7fe f992 	bl	8000108 <__udivsi3>
 8001de4:	0003      	movs	r3, r0
 8001de6:	001a      	movs	r2, r3
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	4353      	muls	r3, r2
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001df2:	e005      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001df8:	e002      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dfe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b00f      	add	sp, #60	; 0x3c
 8001e08:	bd90      	pop	{r4, r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	08002a68 	.word	0x08002a68
 8001e10:	08002a78 	.word	0x08002a78
 8001e14:	40021000 	.word	0x40021000
 8001e18:	007a1200 	.word	0x007a1200
 8001e1c:	02dc6c00 	.word	0x02dc6c00

08001e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e24:	4b02      	ldr	r3, [pc, #8]	; (8001e30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	200000cc 	.word	0x200000cc

08001e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e38:	f7ff fff2 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e3c:	0001      	movs	r1, r0
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	2207      	movs	r2, #7
 8001e46:	4013      	ands	r3, r2
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e4a:	5cd3      	ldrb	r3, [r2, r3]
 8001e4c:	40d9      	lsrs	r1, r3
 8001e4e:	000b      	movs	r3, r1
}    
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08002a98 	.word	0x08002a98

08001e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	025b      	lsls	r3, r3, #9
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d100      	bne.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e7c:	e08f      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2317      	movs	r3, #23
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	055b      	lsls	r3, r3, #21
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d111      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	4b6c      	ldr	r3, [pc, #432]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	4b6b      	ldr	r3, [pc, #428]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	0549      	lsls	r1, r1, #21
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	61da      	str	r2, [r3, #28]
 8001ea0:	4b68      	ldr	r3, [pc, #416]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ea2:	69da      	ldr	r2, [r3, #28]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	055b      	lsls	r3, r3, #21
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eae:	2317      	movs	r3, #23
 8001eb0:	18fb      	adds	r3, r7, r3
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	4b64      	ldr	r3, [pc, #400]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d11a      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec2:	4b61      	ldr	r3, [pc, #388]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4b60      	ldr	r3, [pc, #384]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	0049      	lsls	r1, r1, #1
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed0:	f7fe fcfa 	bl	80008c8 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	e008      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eda:	f7fe fcf5 	bl	80008c8 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b64      	cmp	r3, #100	; 0x64
 8001ee6:	d901      	bls.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e0a6      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	4b56      	ldr	r3, [pc, #344]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ef8:	4b52      	ldr	r3, [pc, #328]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	23c0      	movs	r3, #192	; 0xc0
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d034      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	23c0      	movs	r3, #192	; 0xc0
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4013      	ands	r3, r2
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d02c      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f1a:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4a4b      	ldr	r2, [pc, #300]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f24:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	4b46      	ldr	r3, [pc, #280]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f2a:	2180      	movs	r1, #128	; 0x80
 8001f2c:	0249      	lsls	r1, r1, #9
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f34:	6a1a      	ldr	r2, [r3, #32]
 8001f36:	4b43      	ldr	r3, [pc, #268]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f38:	4945      	ldr	r1, [pc, #276]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d013      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fcbc 	bl	80008c8 <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f54:	e009      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f56:	f7fe fcb7 	bl	80008c8 <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	4a3c      	ldr	r2, [pc, #240]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e067      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6a:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f74:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a34      	ldr	r2, [pc, #208]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	4b30      	ldr	r3, [pc, #192]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f84:	430a      	orrs	r2, r1
 8001f86:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f88:	2317      	movs	r3, #23
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f94:	69da      	ldr	r2, [r3, #28]
 8001f96:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f98:	492f      	ldr	r1, [pc, #188]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d009      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	2203      	movs	r2, #3
 8001fae:	4393      	bics	r3, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	4b23      	ldr	r3, [pc, #140]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d009      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a24      	ldr	r2, [pc, #144]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d009      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	2210      	movs	r2, #16
 8001fea:	4393      	bics	r3, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	4013      	ands	r3, r2
 8002002:	d009      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	4393      	bics	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002014:	430a      	orrs	r2, r1
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4013      	ands	r3, r2
 8002022:	d009      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	2240      	movs	r2, #64	; 0x40
 800202a:	4393      	bics	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002034:	430a      	orrs	r2, r1
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b006      	add	sp, #24
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
 800204c:	fffffcff 	.word	0xfffffcff
 8002050:	fffeffff 	.word	0xfffeffff
 8002054:	00001388 	.word	0x00001388
 8002058:	efffffff 	.word	0xefffffff
 800205c:	fffcffff 	.word	0xfffcffff

08002060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e042      	b.n	80020f8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	223d      	movs	r2, #61	; 0x3d
 8002076:	5c9b      	ldrb	r3, [r3, r2]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d107      	bne.n	800208e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	223c      	movs	r2, #60	; 0x3c
 8002082:	2100      	movs	r1, #0
 8002084:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	0018      	movs	r0, r3
 800208a:	f7fe fb03 	bl	8000694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	223d      	movs	r2, #61	; 0x3d
 8002092:	2102      	movs	r1, #2
 8002094:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3304      	adds	r3, #4
 800209e:	0019      	movs	r1, r3
 80020a0:	0010      	movs	r0, r2
 80020a2:	f000 f877 	bl	8002194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2246      	movs	r2, #70	; 0x46
 80020aa:	2101      	movs	r1, #1
 80020ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	223e      	movs	r2, #62	; 0x3e
 80020b2:	2101      	movs	r1, #1
 80020b4:	5499      	strb	r1, [r3, r2]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	223f      	movs	r2, #63	; 0x3f
 80020ba:	2101      	movs	r1, #1
 80020bc:	5499      	strb	r1, [r3, r2]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2240      	movs	r2, #64	; 0x40
 80020c2:	2101      	movs	r1, #1
 80020c4:	5499      	strb	r1, [r3, r2]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2241      	movs	r2, #65	; 0x41
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2242      	movs	r2, #66	; 0x42
 80020d2:	2101      	movs	r1, #1
 80020d4:	5499      	strb	r1, [r3, r2]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2243      	movs	r2, #67	; 0x43
 80020da:	2101      	movs	r1, #1
 80020dc:	5499      	strb	r1, [r3, r2]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2244      	movs	r2, #68	; 0x44
 80020e2:	2101      	movs	r1, #1
 80020e4:	5499      	strb	r1, [r3, r2]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2245      	movs	r2, #69	; 0x45
 80020ea:	2101      	movs	r1, #1
 80020ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	223d      	movs	r2, #61	; 0x3d
 80020f2:	2101      	movs	r1, #1
 80020f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b002      	add	sp, #8
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	223d      	movs	r2, #61	; 0x3d
 800210c:	5c9b      	ldrb	r3, [r3, r2]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d001      	beq.n	8002118 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e033      	b.n	8002180 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	223d      	movs	r2, #61	; 0x3d
 800211c:	2102      	movs	r1, #2
 800211e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a18      	ldr	r2, [pc, #96]	; (8002188 <HAL_TIM_Base_Start+0x88>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00f      	beq.n	800214a <HAL_TIM_Base_Start+0x4a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	05db      	lsls	r3, r3, #23
 8002132:	429a      	cmp	r2, r3
 8002134:	d009      	beq.n	800214a <HAL_TIM_Base_Start+0x4a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a14      	ldr	r2, [pc, #80]	; (800218c <HAL_TIM_Base_Start+0x8c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d004      	beq.n	800214a <HAL_TIM_Base_Start+0x4a>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a12      	ldr	r2, [pc, #72]	; (8002190 <HAL_TIM_Base_Start+0x90>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d111      	bne.n	800216e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2207      	movs	r2, #7
 8002152:	4013      	ands	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b06      	cmp	r3, #6
 800215a:	d010      	beq.n	800217e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2101      	movs	r1, #1
 8002168:	430a      	orrs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800216c:	e007      	b.n	800217e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2101      	movs	r1, #1
 800217a:	430a      	orrs	r2, r1
 800217c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b004      	add	sp, #16
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40012c00 	.word	0x40012c00
 800218c:	40000400 	.word	0x40000400
 8002190:	40014000 	.word	0x40014000

08002194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a34      	ldr	r2, [pc, #208]	; (8002278 <TIM_Base_SetConfig+0xe4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d008      	beq.n	80021be <TIM_Base_SetConfig+0x2a>
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	05db      	lsls	r3, r3, #23
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d003      	beq.n	80021be <TIM_Base_SetConfig+0x2a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a30      	ldr	r2, [pc, #192]	; (800227c <TIM_Base_SetConfig+0xe8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d108      	bne.n	80021d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2270      	movs	r2, #112	; 0x70
 80021c2:	4393      	bics	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a29      	ldr	r2, [pc, #164]	; (8002278 <TIM_Base_SetConfig+0xe4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d018      	beq.n	800220a <TIM_Base_SetConfig+0x76>
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	05db      	lsls	r3, r3, #23
 80021de:	429a      	cmp	r2, r3
 80021e0:	d013      	beq.n	800220a <TIM_Base_SetConfig+0x76>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a25      	ldr	r2, [pc, #148]	; (800227c <TIM_Base_SetConfig+0xe8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00f      	beq.n	800220a <TIM_Base_SetConfig+0x76>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a24      	ldr	r2, [pc, #144]	; (8002280 <TIM_Base_SetConfig+0xec>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00b      	beq.n	800220a <TIM_Base_SetConfig+0x76>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a23      	ldr	r2, [pc, #140]	; (8002284 <TIM_Base_SetConfig+0xf0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <TIM_Base_SetConfig+0x76>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a22      	ldr	r2, [pc, #136]	; (8002288 <TIM_Base_SetConfig+0xf4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <TIM_Base_SetConfig+0x76>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a21      	ldr	r2, [pc, #132]	; (800228c <TIM_Base_SetConfig+0xf8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d108      	bne.n	800221c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a20      	ldr	r2, [pc, #128]	; (8002290 <TIM_Base_SetConfig+0xfc>)
 800220e:	4013      	ands	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2280      	movs	r2, #128	; 0x80
 8002220:	4393      	bics	r3, r2
 8002222:	001a      	movs	r2, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a0c      	ldr	r2, [pc, #48]	; (8002278 <TIM_Base_SetConfig+0xe4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00b      	beq.n	8002262 <TIM_Base_SetConfig+0xce>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <TIM_Base_SetConfig+0xf0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d007      	beq.n	8002262 <TIM_Base_SetConfig+0xce>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <TIM_Base_SetConfig+0xf4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d003      	beq.n	8002262 <TIM_Base_SetConfig+0xce>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <TIM_Base_SetConfig+0xf8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d103      	bne.n	800226a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	615a      	str	r2, [r3, #20]
}
 8002270:	46c0      	nop			; (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	b004      	add	sp, #16
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40012c00 	.word	0x40012c00
 800227c:	40000400 	.word	0x40000400
 8002280:	40002000 	.word	0x40002000
 8002284:	40014000 	.word	0x40014000
 8002288:	40014400 	.word	0x40014400
 800228c:	40014800 	.word	0x40014800
 8002290:	fffffcff 	.word	0xfffffcff

08002294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	223c      	movs	r2, #60	; 0x3c
 80022a2:	5c9b      	ldrb	r3, [r3, r2]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e047      	b.n	800233c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	223c      	movs	r2, #60	; 0x3c
 80022b0:	2101      	movs	r1, #1
 80022b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	223d      	movs	r2, #61	; 0x3d
 80022b8:	2102      	movs	r1, #2
 80022ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2270      	movs	r2, #112	; 0x70
 80022d0:	4393      	bics	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a16      	ldr	r2, [pc, #88]	; (8002344 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d00f      	beq.n	8002310 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	05db      	lsls	r3, r3, #23
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d009      	beq.n	8002310 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d004      	beq.n	8002310 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a10      	ldr	r2, [pc, #64]	; (800234c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d10c      	bne.n	800232a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	4393      	bics	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	4313      	orrs	r3, r2
 8002320:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	223d      	movs	r2, #61	; 0x3d
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	223c      	movs	r2, #60	; 0x3c
 8002336:	2100      	movs	r1, #0
 8002338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b004      	add	sp, #16
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40000400 	.word	0x40000400
 800234c:	40014000 	.word	0x40014000

08002350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e044      	b.n	80023ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002366:	2b00      	cmp	r3, #0
 8002368:	d107      	bne.n	800237a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2274      	movs	r2, #116	; 0x74
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0018      	movs	r0, r3
 8002376:	f7fe f9ab 	bl	80006d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2224      	movs	r2, #36	; 0x24
 800237e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2101      	movs	r1, #1
 800238c:	438a      	bics	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	0018      	movs	r0, r3
 8002394:	f000 f830 	bl	80023f8 <UART_SetConfig>
 8002398:	0003      	movs	r3, r0
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e024      	b.n	80023ec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 f9a7 	bl	8002700 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	490d      	ldr	r1, [pc, #52]	; (80023f4 <HAL_UART_Init+0xa4>)
 80023be:	400a      	ands	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	212a      	movs	r1, #42	; 0x2a
 80023ce:	438a      	bics	r2, r1
 80023d0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2101      	movs	r1, #1
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 fa3f 	bl	8002868 <UART_CheckIdleState>
 80023ea:	0003      	movs	r3, r0
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b002      	add	sp, #8
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	ffffb7ff 	.word	0xffffb7ff

080023f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002400:	231e      	movs	r3, #30
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4aac      	ldr	r2, [pc, #688]	; (80026d8 <UART_SetConfig+0x2e0>)
 8002428:	4013      	ands	r3, r2
 800242a:	0019      	movs	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	430a      	orrs	r2, r1
 8002434:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4aa7      	ldr	r2, [pc, #668]	; (80026dc <UART_SetConfig+0x2e4>)
 800243e:	4013      	ands	r3, r2
 8002440:	0019      	movs	r1, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a9e      	ldr	r2, [pc, #632]	; (80026e0 <UART_SetConfig+0x2e8>)
 8002466:	4013      	ands	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	430a      	orrs	r2, r1
 8002472:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a9a      	ldr	r2, [pc, #616]	; (80026e4 <UART_SetConfig+0x2ec>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d125      	bne.n	80024ca <UART_SetConfig+0xd2>
 800247e:	4b9a      	ldr	r3, [pc, #616]	; (80026e8 <UART_SetConfig+0x2f0>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	2203      	movs	r2, #3
 8002484:	4013      	ands	r3, r2
 8002486:	2b01      	cmp	r3, #1
 8002488:	d00f      	beq.n	80024aa <UART_SetConfig+0xb2>
 800248a:	d304      	bcc.n	8002496 <UART_SetConfig+0x9e>
 800248c:	2b02      	cmp	r3, #2
 800248e:	d011      	beq.n	80024b4 <UART_SetConfig+0xbc>
 8002490:	2b03      	cmp	r3, #3
 8002492:	d005      	beq.n	80024a0 <UART_SetConfig+0xa8>
 8002494:	e013      	b.n	80024be <UART_SetConfig+0xc6>
 8002496:	231f      	movs	r3, #31
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	e064      	b.n	800256a <UART_SetConfig+0x172>
 80024a0:	231f      	movs	r3, #31
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	2202      	movs	r2, #2
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	e05f      	b.n	800256a <UART_SetConfig+0x172>
 80024aa:	231f      	movs	r3, #31
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	2204      	movs	r2, #4
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e05a      	b.n	800256a <UART_SetConfig+0x172>
 80024b4:	231f      	movs	r3, #31
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	2208      	movs	r2, #8
 80024ba:	701a      	strb	r2, [r3, #0]
 80024bc:	e055      	b.n	800256a <UART_SetConfig+0x172>
 80024be:	231f      	movs	r3, #31
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2210      	movs	r2, #16
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	e04f      	b.n	800256a <UART_SetConfig+0x172>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a87      	ldr	r2, [pc, #540]	; (80026ec <UART_SetConfig+0x2f4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d132      	bne.n	800253a <UART_SetConfig+0x142>
 80024d4:	4b84      	ldr	r3, [pc, #528]	; (80026e8 <UART_SetConfig+0x2f0>)
 80024d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d8:	23c0      	movs	r3, #192	; 0xc0
 80024da:	029b      	lsls	r3, r3, #10
 80024dc:	4013      	ands	r3, r2
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	0252      	lsls	r2, r2, #9
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d019      	beq.n	800251a <UART_SetConfig+0x122>
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	0252      	lsls	r2, r2, #9
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d802      	bhi.n	80024f4 <UART_SetConfig+0xfc>
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <UART_SetConfig+0x10e>
 80024f2:	e01c      	b.n	800252e <UART_SetConfig+0x136>
 80024f4:	2280      	movs	r2, #128	; 0x80
 80024f6:	0292      	lsls	r2, r2, #10
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d013      	beq.n	8002524 <UART_SetConfig+0x12c>
 80024fc:	22c0      	movs	r2, #192	; 0xc0
 80024fe:	0292      	lsls	r2, r2, #10
 8002500:	4293      	cmp	r3, r2
 8002502:	d005      	beq.n	8002510 <UART_SetConfig+0x118>
 8002504:	e013      	b.n	800252e <UART_SetConfig+0x136>
 8002506:	231f      	movs	r3, #31
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	e02c      	b.n	800256a <UART_SetConfig+0x172>
 8002510:	231f      	movs	r3, #31
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	2202      	movs	r2, #2
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e027      	b.n	800256a <UART_SetConfig+0x172>
 800251a:	231f      	movs	r3, #31
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	2204      	movs	r2, #4
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	e022      	b.n	800256a <UART_SetConfig+0x172>
 8002524:	231f      	movs	r3, #31
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	2208      	movs	r2, #8
 800252a:	701a      	strb	r2, [r3, #0]
 800252c:	e01d      	b.n	800256a <UART_SetConfig+0x172>
 800252e:	231f      	movs	r3, #31
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	2210      	movs	r2, #16
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	e017      	b.n	800256a <UART_SetConfig+0x172>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6c      	ldr	r2, [pc, #432]	; (80026f0 <UART_SetConfig+0x2f8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d104      	bne.n	800254e <UART_SetConfig+0x156>
 8002544:	231f      	movs	r3, #31
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e00d      	b.n	800256a <UART_SetConfig+0x172>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a68      	ldr	r2, [pc, #416]	; (80026f4 <UART_SetConfig+0x2fc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d104      	bne.n	8002562 <UART_SetConfig+0x16a>
 8002558:	231f      	movs	r3, #31
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	e003      	b.n	800256a <UART_SetConfig+0x172>
 8002562:	231f      	movs	r3, #31
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2210      	movs	r2, #16
 8002568:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	429a      	cmp	r2, r3
 8002574:	d15c      	bne.n	8002630 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 8002576:	231f      	movs	r3, #31
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d00d      	beq.n	800259c <UART_SetConfig+0x1a4>
 8002580:	dc02      	bgt.n	8002588 <UART_SetConfig+0x190>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <UART_SetConfig+0x19a>
 8002586:	e015      	b.n	80025b4 <UART_SetConfig+0x1bc>
 8002588:	2b04      	cmp	r3, #4
 800258a:	d00a      	beq.n	80025a2 <UART_SetConfig+0x1aa>
 800258c:	2b08      	cmp	r3, #8
 800258e:	d00d      	beq.n	80025ac <UART_SetConfig+0x1b4>
 8002590:	e010      	b.n	80025b4 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002592:	f7ff fc4f 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 8002596:	0003      	movs	r3, r0
 8002598:	61bb      	str	r3, [r7, #24]
        break;
 800259a:	e012      	b.n	80025c2 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800259c:	4b56      	ldr	r3, [pc, #344]	; (80026f8 <UART_SetConfig+0x300>)
 800259e:	61bb      	str	r3, [r7, #24]
        break;
 80025a0:	e00f      	b.n	80025c2 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025a2:	f7ff fbbf 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 80025a6:	0003      	movs	r3, r0
 80025a8:	61bb      	str	r3, [r7, #24]
        break;
 80025aa:	e00a      	b.n	80025c2 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	61bb      	str	r3, [r7, #24]
        break;
 80025b2:	e006      	b.n	80025c2 <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025b8:	231e      	movs	r3, #30
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
        break;
 80025c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d100      	bne.n	80025ca <UART_SetConfig+0x1d2>
 80025c8:	e079      	b.n	80026be <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	005a      	lsls	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	18d2      	adds	r2, r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0019      	movs	r1, r3
 80025dc:	0010      	movs	r0, r2
 80025de:	f7fd fd93 	bl	8000108 <__udivsi3>
 80025e2:	0003      	movs	r3, r0
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b0f      	cmp	r3, #15
 80025ec:	d91b      	bls.n	8002626 <UART_SetConfig+0x22e>
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4a42      	ldr	r2, [pc, #264]	; (80026fc <UART_SetConfig+0x304>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d817      	bhi.n	8002626 <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	200e      	movs	r0, #14
 80025fc:	183b      	adds	r3, r7, r0
 80025fe:	210f      	movs	r1, #15
 8002600:	438a      	bics	r2, r1
 8002602:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	b29b      	uxth	r3, r3
 800260a:	2207      	movs	r2, #7
 800260c:	4013      	ands	r3, r2
 800260e:	b299      	uxth	r1, r3
 8002610:	183b      	adds	r3, r7, r0
 8002612:	183a      	adds	r2, r7, r0
 8002614:	8812      	ldrh	r2, [r2, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	183a      	adds	r2, r7, r0
 8002620:	8812      	ldrh	r2, [r2, #0]
 8002622:	60da      	str	r2, [r3, #12]
 8002624:	e04b      	b.n	80026be <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8002626:	231e      	movs	r3, #30
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e046      	b.n	80026be <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002630:	231f      	movs	r3, #31
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d00d      	beq.n	8002656 <UART_SetConfig+0x25e>
 800263a:	dc02      	bgt.n	8002642 <UART_SetConfig+0x24a>
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <UART_SetConfig+0x254>
 8002640:	e015      	b.n	800266e <UART_SetConfig+0x276>
 8002642:	2b04      	cmp	r3, #4
 8002644:	d00a      	beq.n	800265c <UART_SetConfig+0x264>
 8002646:	2b08      	cmp	r3, #8
 8002648:	d00d      	beq.n	8002666 <UART_SetConfig+0x26e>
 800264a:	e010      	b.n	800266e <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800264c:	f7ff fbf2 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 8002650:	0003      	movs	r3, r0
 8002652:	61bb      	str	r3, [r7, #24]
        break;
 8002654:	e012      	b.n	800267c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <UART_SetConfig+0x300>)
 8002658:	61bb      	str	r3, [r7, #24]
        break;
 800265a:	e00f      	b.n	800267c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800265c:	f7ff fb62 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8002660:	0003      	movs	r3, r0
 8002662:	61bb      	str	r3, [r7, #24]
        break;
 8002664:	e00a      	b.n	800267c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	61bb      	str	r3, [r7, #24]
        break;
 800266c:	e006      	b.n	800267c <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002672:	231e      	movs	r3, #30
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
        break;
 800267a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01d      	beq.n	80026be <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	085a      	lsrs	r2, r3, #1
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	18d2      	adds	r2, r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	0019      	movs	r1, r3
 8002692:	0010      	movs	r0, r2
 8002694:	f7fd fd38 	bl	8000108 <__udivsi3>
 8002698:	0003      	movs	r3, r0
 800269a:	b29b      	uxth	r3, r3
 800269c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2b0f      	cmp	r3, #15
 80026a2:	d908      	bls.n	80026b6 <UART_SetConfig+0x2be>
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4a15      	ldr	r2, [pc, #84]	; (80026fc <UART_SetConfig+0x304>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d804      	bhi.n	80026b6 <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	60da      	str	r2, [r3, #12]
 80026b4:	e003      	b.n	80026be <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 80026b6:	231e      	movs	r3, #30
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80026ca:	231e      	movs	r3, #30
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	781b      	ldrb	r3, [r3, #0]
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b008      	add	sp, #32
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	efff69f3 	.word	0xefff69f3
 80026dc:	ffffcfff 	.word	0xffffcfff
 80026e0:	fffff4ff 	.word	0xfffff4ff
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40004400 	.word	0x40004400
 80026f0:	40004800 	.word	0x40004800
 80026f4:	40004c00 	.word	0x40004c00
 80026f8:	007a1200 	.word	0x007a1200
 80026fc:	0000ffff 	.word	0x0000ffff

08002700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	2201      	movs	r2, #1
 800270e:	4013      	ands	r3, r2
 8002710:	d00b      	beq.n	800272a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a4a      	ldr	r2, [pc, #296]	; (8002844 <UART_AdvFeatureConfig+0x144>)
 800271a:	4013      	ands	r3, r2
 800271c:	0019      	movs	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	2202      	movs	r2, #2
 8002730:	4013      	ands	r3, r2
 8002732:	d00b      	beq.n	800274c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a43      	ldr	r2, [pc, #268]	; (8002848 <UART_AdvFeatureConfig+0x148>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2204      	movs	r2, #4
 8002752:	4013      	ands	r3, r2
 8002754:	d00b      	beq.n	800276e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a3b      	ldr	r2, [pc, #236]	; (800284c <UART_AdvFeatureConfig+0x14c>)
 800275e:	4013      	ands	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	2208      	movs	r2, #8
 8002774:	4013      	ands	r3, r2
 8002776:	d00b      	beq.n	8002790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a34      	ldr	r2, [pc, #208]	; (8002850 <UART_AdvFeatureConfig+0x150>)
 8002780:	4013      	ands	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2210      	movs	r2, #16
 8002796:	4013      	ands	r3, r2
 8002798:	d00b      	beq.n	80027b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a2c      	ldr	r2, [pc, #176]	; (8002854 <UART_AdvFeatureConfig+0x154>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	2220      	movs	r2, #32
 80027b8:	4013      	ands	r3, r2
 80027ba:	d00b      	beq.n	80027d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4a25      	ldr	r2, [pc, #148]	; (8002858 <UART_AdvFeatureConfig+0x158>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	2240      	movs	r2, #64	; 0x40
 80027da:	4013      	ands	r3, r2
 80027dc:	d01d      	beq.n	800281a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a1d      	ldr	r2, [pc, #116]	; (800285c <UART_AdvFeatureConfig+0x15c>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	035b      	lsls	r3, r3, #13
 80027fe:	429a      	cmp	r2, r3
 8002800:	d10b      	bne.n	800281a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a15      	ldr	r2, [pc, #84]	; (8002860 <UART_AdvFeatureConfig+0x160>)
 800280a:	4013      	ands	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	4013      	ands	r3, r2
 8002822:	d00b      	beq.n	800283c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <UART_AdvFeatureConfig+0x164>)
 800282c:	4013      	ands	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	605a      	str	r2, [r3, #4]
  }
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b002      	add	sp, #8
 8002842:	bd80      	pop	{r7, pc}
 8002844:	fffdffff 	.word	0xfffdffff
 8002848:	fffeffff 	.word	0xfffeffff
 800284c:	fffbffff 	.word	0xfffbffff
 8002850:	ffff7fff 	.word	0xffff7fff
 8002854:	ffffefff 	.word	0xffffefff
 8002858:	ffffdfff 	.word	0xffffdfff
 800285c:	ffefffff 	.word	0xffefffff
 8002860:	ff9fffff 	.word	0xff9fffff
 8002864:	fff7ffff 	.word	0xfff7ffff

08002868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af02      	add	r7, sp, #8
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2280      	movs	r2, #128	; 0x80
 8002874:	2100      	movs	r1, #0
 8002876:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002878:	f7fe f826 	bl	80008c8 <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2208      	movs	r2, #8
 8002888:	4013      	ands	r3, r2
 800288a:	2b08      	cmp	r3, #8
 800288c:	d10d      	bne.n	80028aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	0399      	lsls	r1, r3, #14
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <UART_CheckIdleState+0x90>)
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	0013      	movs	r3, r2
 800289c:	2200      	movs	r2, #0
 800289e:	f000 f82d 	bl	80028fc <UART_WaitOnFlagUntilTimeout>
 80028a2:	1e03      	subs	r3, r0, #0
 80028a4:	d001      	beq.n	80028aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e022      	b.n	80028f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2204      	movs	r2, #4
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d10d      	bne.n	80028d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	03d9      	lsls	r1, r3, #15
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <UART_CheckIdleState+0x90>)
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	0013      	movs	r3, r2
 80028c6:	2200      	movs	r2, #0
 80028c8:	f000 f818 	bl	80028fc <UART_WaitOnFlagUntilTimeout>
 80028cc:	1e03      	subs	r3, r0, #0
 80028ce:	d001      	beq.n	80028d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e00d      	b.n	80028f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2220      	movs	r2, #32
 80028de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2274      	movs	r2, #116	; 0x74
 80028ea:	2100      	movs	r1, #0
 80028ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b004      	add	sp, #16
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	01ffffff 	.word	0x01ffffff

080028fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800290c:	e05e      	b.n	80029cc <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	3301      	adds	r3, #1
 8002912:	d05b      	beq.n	80029cc <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002914:	f7fd ffd8 	bl	80008c8 <HAL_GetTick>
 8002918:	0002      	movs	r2, r0
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	429a      	cmp	r2, r3
 8002922:	d302      	bcc.n	800292a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d11b      	bne.n	8002962 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	492f      	ldr	r1, [pc, #188]	; (80029f4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002936:	400a      	ands	r2, r1
 8002938:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2101      	movs	r1, #1
 8002946:	438a      	bics	r2, r1
 8002948:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2274      	movs	r2, #116	; 0x74
 800295a:	2100      	movs	r1, #0
 800295c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e044      	b.n	80029ec <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2204      	movs	r2, #4
 800296a:	4013      	ands	r3, r2
 800296c:	d02e      	beq.n	80029cc <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69da      	ldr	r2, [r3, #28]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	401a      	ands	r2, r3
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	429a      	cmp	r2, r3
 8002980:	d124      	bne.n	80029cc <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4917      	ldr	r1, [pc, #92]	; (80029f4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002998:	400a      	ands	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2101      	movs	r1, #1
 80029a8:	438a      	bics	r2, r1
 80029aa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	2120      	movs	r1, #32
 80029be:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2274      	movs	r2, #116	; 0x74
 80029c4:	2100      	movs	r1, #0
 80029c6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e00f      	b.n	80029ec <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	4013      	ands	r3, r2
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	425a      	negs	r2, r3
 80029dc:	4153      	adcs	r3, r2
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	001a      	movs	r2, r3
 80029e2:	1dfb      	adds	r3, r7, #7
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d091      	beq.n	800290e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b004      	add	sp, #16
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	fffffe5f 	.word	0xfffffe5f

080029f8 <__libc_init_array>:
 80029f8:	b570      	push	{r4, r5, r6, lr}
 80029fa:	2600      	movs	r6, #0
 80029fc:	4d0c      	ldr	r5, [pc, #48]	; (8002a30 <__libc_init_array+0x38>)
 80029fe:	4c0d      	ldr	r4, [pc, #52]	; (8002a34 <__libc_init_array+0x3c>)
 8002a00:	1b64      	subs	r4, r4, r5
 8002a02:	10a4      	asrs	r4, r4, #2
 8002a04:	42a6      	cmp	r6, r4
 8002a06:	d109      	bne.n	8002a1c <__libc_init_array+0x24>
 8002a08:	2600      	movs	r6, #0
 8002a0a:	f000 f821 	bl	8002a50 <_init>
 8002a0e:	4d0a      	ldr	r5, [pc, #40]	; (8002a38 <__libc_init_array+0x40>)
 8002a10:	4c0a      	ldr	r4, [pc, #40]	; (8002a3c <__libc_init_array+0x44>)
 8002a12:	1b64      	subs	r4, r4, r5
 8002a14:	10a4      	asrs	r4, r4, #2
 8002a16:	42a6      	cmp	r6, r4
 8002a18:	d105      	bne.n	8002a26 <__libc_init_array+0x2e>
 8002a1a:	bd70      	pop	{r4, r5, r6, pc}
 8002a1c:	00b3      	lsls	r3, r6, #2
 8002a1e:	58eb      	ldr	r3, [r5, r3]
 8002a20:	4798      	blx	r3
 8002a22:	3601      	adds	r6, #1
 8002a24:	e7ee      	b.n	8002a04 <__libc_init_array+0xc>
 8002a26:	00b3      	lsls	r3, r6, #2
 8002a28:	58eb      	ldr	r3, [r5, r3]
 8002a2a:	4798      	blx	r3
 8002a2c:	3601      	adds	r6, #1
 8002a2e:	e7f2      	b.n	8002a16 <__libc_init_array+0x1e>
 8002a30:	08002aa0 	.word	0x08002aa0
 8002a34:	08002aa0 	.word	0x08002aa0
 8002a38:	08002aa0 	.word	0x08002aa0
 8002a3c:	08002aa4 	.word	0x08002aa4

08002a40 <memset>:
 8002a40:	0003      	movs	r3, r0
 8002a42:	1812      	adds	r2, r2, r0
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d100      	bne.n	8002a4a <memset+0xa>
 8002a48:	4770      	bx	lr
 8002a4a:	7019      	strb	r1, [r3, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	e7f9      	b.n	8002a44 <memset+0x4>

08002a50 <_init>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr

08002a5c <_fini>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a62:	bc08      	pop	{r3}
 8002a64:	469e      	mov	lr, r3
 8002a66:	4770      	bx	lr
